
4100901-Mid_Term_Exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005148  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  080052d0  080052d0  000152d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005948  08005948  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005948  08005948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005950  08005950  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005950  08005950  00015950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  2000000c  08005964  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08005964  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d11  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f5  00000000  00000000  00030d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00033488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af3  00000000  00000000  000342c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261c0  00000000  00000000  00034db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012714  00000000  00000000  0005af73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb20b  00000000  00000000  0006d687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a38  00000000  00000000  00158894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0015c2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052b8 	.word	0x080052b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080052b8 	.word	0x080052b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_UART_RxCpltCallback>:
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	if(huart-> Instance == USART1){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a10      	ldr	r2, [pc, #64]	; (8000514 <HAL_UART_RxCpltCallback+0x50>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d10a      	bne.n	80004ec <HAL_UART_RxCpltCallback+0x28>

		ring_buffer_write(&rb_usart1,data);
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <HAL_UART_RxCpltCallback+0x54>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	4619      	mov	r1, r3
 80004dc:	480f      	ldr	r0, [pc, #60]	; (800051c <HAL_UART_RxCpltCallback+0x58>)
 80004de:	f000 fa89 	bl	80009f4 <ring_buffer_write>
		HAL_UART_Receive_IT(&huart1,&data,1);
 80004e2:	2201      	movs	r2, #1
 80004e4:	490c      	ldr	r1, [pc, #48]	; (8000518 <HAL_UART_RxCpltCallback+0x54>)
 80004e6:	480e      	ldr	r0, [pc, #56]	; (8000520 <HAL_UART_RxCpltCallback+0x5c>)
 80004e8:	f003 f96e 	bl	80037c8 <HAL_UART_Receive_IT>

	}
	if(huart-> Instance == USART2){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <HAL_UART_RxCpltCallback+0x60>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d10a      	bne.n	800050c <HAL_UART_RxCpltCallback+0x48>
		ring_buffer_write(&rb_usart2,data);
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_UART_RxCpltCallback+0x54>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	4619      	mov	r1, r3
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <HAL_UART_RxCpltCallback+0x64>)
 80004fe:	f000 fa79 	bl	80009f4 <ring_buffer_write>
		HAL_UART_Receive_IT(&huart2,&data,1);
 8000502:	2201      	movs	r2, #1
 8000504:	4904      	ldr	r1, [pc, #16]	; (8000518 <HAL_UART_RxCpltCallback+0x54>)
 8000506:	4809      	ldr	r0, [pc, #36]	; (800052c <HAL_UART_RxCpltCallback+0x68>)
 8000508:	f003 f95e 	bl	80037c8 <HAL_UART_Receive_IT>
	}

}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40013800 	.word	0x40013800
 8000518:	2000018c 	.word	0x2000018c
 800051c:	2000019c 	.word	0x2000019c
 8000520:	2000007c 	.word	0x2000007c
 8000524:	40004400 	.word	0x40004400
 8000528:	200001b0 	.word	0x200001b0
 800052c:	20000104 	.word	0x20000104

08000530 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]


  }
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fc8a 	bl	8000e66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f8ad 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f99d 	bl	8000894 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f96b 	bl	8000834 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800055e:	f000 f939 	bl	80007d4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000562:	f000 f8f7 	bl	8000754 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000566:	f004 fc7b 	bl	8004e60 <ssd1306_Init>
    ssd1306_Fill(Black);
 800056a:	2000      	movs	r0, #0
 800056c:	f004 fce2 	bl	8004f34 <ssd1306_Fill>
    ssd1306_SetCursor(10,20);
 8000570:	2114      	movs	r1, #20
 8000572:	200a      	movs	r0, #10
 8000574:	f004 fe2a 	bl	80051cc <ssd1306_SetCursor>
    ssd1306_WriteString("holaaa",Font_6x8,White);
 8000578:	4b3f      	ldr	r3, [pc, #252]	; (8000678 <main+0x130>)
 800057a:	2201      	movs	r2, #1
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000580:	483e      	ldr	r0, [pc, #248]	; (800067c <main+0x134>)
 8000582:	f004 fdfd 	bl	8005180 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000586:	f004 fced 	bl	8004f64 <ssd1306_UpdateScreen>
    ring_buffer_init(&rb_usart1, mem_usart1, CAPACITY_USART1);
 800058a:	220a      	movs	r2, #10
 800058c:	493c      	ldr	r1, [pc, #240]	; (8000680 <main+0x138>)
 800058e:	483d      	ldr	r0, [pc, #244]	; (8000684 <main+0x13c>)
 8000590:	f000 f9f7 	bl	8000982 <ring_buffer_init>
    ring_buffer_init(&rb_usart2, mem_usart2, CAPACITY_USART2);
 8000594:	220a      	movs	r2, #10
 8000596:	493c      	ldr	r1, [pc, #240]	; (8000688 <main+0x140>)
 8000598:	483c      	ldr	r0, [pc, #240]	; (800068c <main+0x144>)
 800059a:	f000 f9f2 	bl	8000982 <ring_buffer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Receive_IT(&huart1,&data, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	493b      	ldr	r1, [pc, #236]	; (8000690 <main+0x148>)
 80005a2:	483c      	ldr	r0, [pc, #240]	; (8000694 <main+0x14c>)
 80005a4:	f003 f910 	bl	80037c8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &data, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	4939      	ldr	r1, [pc, #228]	; (8000690 <main+0x148>)
 80005ac:	483a      	ldr	r0, [pc, #232]	; (8000698 <main+0x150>)
 80005ae:	f003 f90b 	bl	80037c8 <HAL_UART_Receive_IT>

  while (1)
  {

	  uint8_t byte = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	737b      	strb	r3, [r7, #13]


	//  if(ring_buffer_read(&byte)!=0){
	//	  HAL_UART_Transmit(&huart2,&byte,1,10);
	//  }
	  if(ring_buffer_is_full(&rb_usart2)!=0){
 80005b6:	4835      	ldr	r0, [pc, #212]	; (800068c <main+0x144>)
 80005b8:	f000 f9f7 	bl	80009aa <ring_buffer_is_full>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f7      	beq.n	80005b2 <main+0x6a>
		  uint8_t id_incorrect=0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]
		  uint8_t my_id[] = "1053871674";
 80005c6:	4a35      	ldr	r2, [pc, #212]	; (800069c <main+0x154>)
 80005c8:	463b      	mov	r3, r7
 80005ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80005cc:	c303      	stmia	r3!, {r0, r1}
 80005ce:	801a      	strh	r2, [r3, #0]
 80005d0:	3302      	adds	r3, #2
 80005d2:	0c12      	lsrs	r2, r2, #16
 80005d4:	701a      	strb	r2, [r3, #0]
		  for(uint8_t idx=0; idx<sizeof(my_id);idx++){
 80005d6:	2300      	movs	r3, #0
 80005d8:	73bb      	strb	r3, [r7, #14]
 80005da:	e015      	b.n	8000608 <main+0xc0>
			  if(ring_buffer_read(&rb_usart2,&byte)!=0){
 80005dc:	f107 030d 	add.w	r3, r7, #13
 80005e0:	4619      	mov	r1, r3
 80005e2:	482a      	ldr	r0, [pc, #168]	; (800068c <main+0x144>)
 80005e4:	f000 fa52 	bl	8000a8c <ring_buffer_read>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d009      	beq.n	8000602 <main+0xba>
				  if(byte != my_id[idx]){
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	3310      	adds	r3, #16
 80005f2:	443b      	add	r3, r7
 80005f4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80005f8:	7b7b      	ldrb	r3, [r7, #13]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d001      	beq.n	8000602 <main+0xba>
					  id_incorrect = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
		  for(uint8_t idx=0; idx<sizeof(my_id);idx++){
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	3301      	adds	r3, #1
 8000606:	73bb      	strb	r3, [r7, #14]
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	2b0a      	cmp	r3, #10
 800060c:	d9e6      	bls.n	80005dc <main+0x94>

				  }
			  }
		  }
		  if(id_incorrect==0){
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d116      	bne.n	8000642 <main+0xfa>
			  HAL_UART_Transmit(&huart2,(uint8_t *)"Cris\n\r",6,10);
 8000614:	230a      	movs	r3, #10
 8000616:	2206      	movs	r2, #6
 8000618:	4921      	ldr	r1, [pc, #132]	; (80006a0 <main+0x158>)
 800061a:	481f      	ldr	r0, [pc, #124]	; (8000698 <main+0x150>)
 800061c:	f003 f84a 	bl	80036b4 <HAL_UART_Transmit>
			  // Mostrar "Cristian" en la pantalla SSD1306
			  ssd1306_Fill(Black);  // Limpiar la pantalla
 8000620:	2000      	movs	r0, #0
 8000622:	f004 fc87 	bl	8004f34 <ssd1306_Fill>
			  ssd1306_SetCursor(10, 20);
 8000626:	2114      	movs	r1, #20
 8000628:	200a      	movs	r0, #10
 800062a:	f004 fdcf 	bl	80051cc <ssd1306_SetCursor>
			  ssd1306_WriteString("Cris", Font_6x8, White);
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <main+0x130>)
 8000630:	2201      	movs	r2, #1
 8000632:	9200      	str	r2, [sp, #0]
 8000634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000636:	481b      	ldr	r0, [pc, #108]	; (80006a4 <main+0x15c>)
 8000638:	f004 fda2 	bl	8005180 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 800063c:	f004 fc92 	bl	8004f64 <ssd1306_UpdateScreen>
 8000640:	e015      	b.n	800066e <main+0x126>

		  }else{
			  HAL_UART_Transmit(&huart2,(uint8_t *)"Error\n\r",7,10);
 8000642:	230a      	movs	r3, #10
 8000644:	2207      	movs	r2, #7
 8000646:	4918      	ldr	r1, [pc, #96]	; (80006a8 <main+0x160>)
 8000648:	4813      	ldr	r0, [pc, #76]	; (8000698 <main+0x150>)
 800064a:	f003 f833 	bl	80036b4 <HAL_UART_Transmit>

			  // Mostrar "Error" en la pantalla SSD1306
			  ssd1306_Fill(Black);  // Limpiar la pantalla
 800064e:	2000      	movs	r0, #0
 8000650:	f004 fc70 	bl	8004f34 <ssd1306_Fill>
			  ssd1306_SetCursor(10, 20);
 8000654:	2114      	movs	r1, #20
 8000656:	200a      	movs	r0, #10
 8000658:	f004 fdb8 	bl	80051cc <ssd1306_SetCursor>
			  ssd1306_WriteString("Error", Font_6x8, White);
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <main+0x130>)
 800065e:	2201      	movs	r2, #1
 8000660:	9200      	str	r2, [sp, #0]
 8000662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000664:	4811      	ldr	r0, [pc, #68]	; (80006ac <main+0x164>)
 8000666:	f004 fd8b 	bl	8005180 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 800066a:	f004 fc7b 	bl	8004f64 <ssd1306_UpdateScreen>

		  }
		  ring_buffer_reset(&rb_usart2);
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <main+0x144>)
 8000670:	f000 f9ac 	bl	80009cc <ring_buffer_reset>
  {
 8000674:	e79d      	b.n	80005b2 <main+0x6a>
 8000676:	bf00      	nop
 8000678:	0800593c 	.word	0x0800593c
 800067c:	080052d0 	.word	0x080052d0
 8000680:	20000190 	.word	0x20000190
 8000684:	2000019c 	.word	0x2000019c
 8000688:	200001a4 	.word	0x200001a4
 800068c:	200001b0 	.word	0x200001b0
 8000690:	2000018c 	.word	0x2000018c
 8000694:	2000007c 	.word	0x2000007c
 8000698:	20000104 	.word	0x20000104
 800069c:	080052f8 	.word	0x080052f8
 80006a0:	080052d8 	.word	0x080052d8
 80006a4:	080052e0 	.word	0x080052e0
 80006a8:	080052e8 	.word	0x080052e8
 80006ac:	080052f0 	.word	0x080052f0

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	; 0x58
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2244      	movs	r2, #68	; 0x44
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fdce 	bl	8005260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d6:	f001 fc8d 	bl	8001ff4 <HAL_PWREx_ControlVoltageScaling>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e0:	f000 f94a 	bl	8000978 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e4:	2310      	movs	r3, #16
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f0:	2360      	movs	r3, #96	; 0x60
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f8:	2301      	movs	r3, #1
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000700:	2328      	movs	r3, #40	; 0x28
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000704:	2307      	movs	r3, #7
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fcc3 	bl	80020a0 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000720:	f000 f92a 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2303      	movs	r3, #3
 800072a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	2104      	movs	r1, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f002 f88b 	bl	8002858 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000748:	f000 f916 	bl	8000978 <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3758      	adds	r7, #88	; 0x58
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_I2C1_Init+0x74>)
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_I2C1_Init+0x78>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <MX_I2C1_Init+0x7c>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_I2C1_Init+0x74>)
 800076c:	2201      	movs	r2, #1
 800076e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000790:	f000 ff6c 	bl	800166c <HAL_I2C_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800079a:	f000 f8ed 	bl	8000978 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <MX_I2C1_Init+0x74>)
 80007a2:	f001 fb81 	bl	8001ea8 <HAL_I2CEx_ConfigAnalogFilter>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007ac:	f000 f8e4 	bl	8000978 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_I2C1_Init+0x74>)
 80007b4:	f001 fbc3 	bl	8001f3e <HAL_I2CEx_ConfigDigitalFilter>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 f8db 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000028 	.word	0x20000028
 80007cc:	40005400 	.word	0x40005400
 80007d0:	10909cec 	.word	0x10909cec

080007d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_USART1_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000818:	f002 fefe 	bl	8003618 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f8a9 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000007c 	.word	0x2000007c
 8000830:	40013800 	.word	0x40013800

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART2_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART2_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART2_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART2_UART_Init+0x58>)
 8000878:	f002 fece 	bl	8003618 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f879 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000104 	.word	0x20000104
 8000890:	40004400 	.word	0x40004400

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <MX_GPIO_Init+0xdc>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a30      	ldr	r2, [pc, #192]	; (8000970 <MX_GPIO_Init+0xdc>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <MX_GPIO_Init+0xdc>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <MX_GPIO_Init+0xdc>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a2a      	ldr	r2, [pc, #168]	; (8000970 <MX_GPIO_Init+0xdc>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <MX_GPIO_Init+0xdc>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2120      	movs	r1, #32
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f000 fe93 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f000 fe8d 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 80008f2:	2312      	movs	r3, #18
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090a:	f000 fcd5 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D3_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D3_Pin;
 800090e:	23a0      	movs	r3, #160	; 0xa0
 8000910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4619      	mov	r1, r3
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f000 fcc6 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 800092c:	2301      	movs	r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000930:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_GPIO_Init+0xe0>)
 8000942:	f000 fcb9 	bl	80012b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2007      	movs	r0, #7
 800094c:	f000 fbff 	bl	800114e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000950:	2007      	movs	r0, #7
 8000952:	f000 fc18 	bl	8001186 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	200a      	movs	r0, #10
 800095c:	f000 fbf7 	bl	800114e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000960:	200a      	movs	r0, #10
 8000962:	f000 fc10 	bl	8001186 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000966:	bf00      	nop
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000
 8000974:	48000400 	.word	0x48000400

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>

08000982 <ring_buffer_init>:
uint16_t lap_counter_head=0;

uint16_t counter_size_head=0;

void ring_buffer_init(ring_buffer_t *rb, uint8_t  *mem_add, uint8_t cap)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	4613      	mov	r3, r2
 800098e:	71fb      	strb	r3, [r7, #7]
	rb->buffer =mem_add;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	601a      	str	r2, [r3, #0]
	rb->capacity = cap;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	71da      	strb	r2, [r3, #7]
	ring_buffer_reset(rb);
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f000 f815 	bl	80009cc <ring_buffer_reset>

}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <ring_buffer_is_full>:

}



uint8_t ring_buffer_is_full(ring_buffer_t *rb){
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]

	if( rb->is_full!=0){
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	799b      	ldrb	r3, [r3, #6]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <ring_buffer_is_full+0x14>
		return 1; //esta lleno
 80009ba:	2301      	movs	r3, #1
 80009bc:	e000      	b.n	80009c0 <ring_buffer_is_full+0x16>
	}else{
		return 0;// No esta lleno
 80009be:	2300      	movs	r3, #0
	}


}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <ring_buffer_reset>:

void ring_buffer_reset(ring_buffer_t *rb)
{   rb->head = 0;
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	711a      	strb	r2, [r3, #4]
    rb->tail = 0;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	715a      	strb	r2, [r3, #5]
    rb->is_full = 0;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	719a      	strb	r2, [r3, #6]

}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <ring_buffer_write>:

void ring_buffer_write(ring_buffer_t *rb, uint8_t data)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
	rb->buffer[rb->head] = data;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	7912      	ldrb	r2, [r2, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	78fa      	ldrb	r2, [r7, #3]
 8000a0c:	701a      	strb	r2, [r3, #0]
	rb->head = rb->head + 1;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	791b      	ldrb	r3, [r3, #4]
 8000a12:	3301      	adds	r3, #1
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	711a      	strb	r2, [r3, #4]


        if(rb->head>= rb->capacity){ // Si llega al final de la memoria
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	791a      	ldrb	r2, [r3, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	79db      	ldrb	r3, [r3, #7]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d305      	bcc.n	8000a32 <ring_buffer_write+0x3e>
        	rb->head = 0;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	711a      	strb	r2, [r3, #4]
			lap_counter_head=2; // hace el conteo de la primer vuelta
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <ring_buffer_write+0x90>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	801a      	strh	r2, [r3, #0]

		}
		if(rb->is_full!= 0){ // Si se pierden los datos
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	799b      	ldrb	r3, [r3, #6]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d005      	beq.n	8000a46 <ring_buffer_write+0x52>
			rb->tail =rb->tail +1;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	795b      	ldrb	r3, [r3, #5]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	715a      	strb	r2, [r3, #5]
		}
		if(rb->tail >= rb->capacity){ // Si la cola llega al final de la memoria
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	795a      	ldrb	r2, [r3, #5]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	79db      	ldrb	r3, [r3, #7]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d302      	bcc.n	8000a58 <ring_buffer_write+0x64>
			rb->tail=0;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	715a      	strb	r2, [r3, #5]
		}
		if(rb->head == rb->tail){ // Si la cabeza alcanza la cola
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	791a      	ldrb	r2, [r3, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	795b      	ldrb	r3, [r3, #5]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d108      	bne.n	8000a76 <ring_buffer_write+0x82>
			rb->is_full=1;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	719a      	strb	r2, [r3, #6]
			counter_size_head++;// cuenta las posiciones que se corrio la cabeza despues de la primer vuelta.
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <ring_buffer_write+0x94>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <ring_buffer_write+0x94>)
 8000a74:	801a      	strh	r2, [r3, #0]

        }
 }
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	200001b8 	.word	0x200001b8
 8000a88:	200001ba 	.word	0x200001ba

08000a8c <ring_buffer_read>:

uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *byte)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]

	if (( rb->is_full!=0)||(rb->head != rb->tail))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	799b      	ldrb	r3, [r3, #6]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d105      	bne.n	8000aaa <ring_buffer_read+0x1e>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	791a      	ldrb	r2, [r3, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	795b      	ldrb	r3, [r3, #5]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d01b      	beq.n	8000ae2 <ring_buffer_read+0x56>
	{

		*byte = rb->buffer[rb->tail];
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	7952      	ldrb	r2, [r2, #5]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	781a      	ldrb	r2, [r3, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	701a      	strb	r2, [r3, #0]
		rb->tail = rb->tail +1;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	795b      	ldrb	r3, [r3, #5]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	715a      	strb	r2, [r3, #5]
		if(rb->tail >= rb->capacity){
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	795a      	ldrb	r2, [r3, #5]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	79db      	ldrb	r3, [r3, #7]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d302      	bcc.n	8000ad8 <ring_buffer_read+0x4c>
			rb->tail =0;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	715a      	strb	r2, [r3, #5]
		}
	    rb->is_full =0;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	719a      	strb	r2, [r3, #6]
	  return 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <ring_buffer_read+0x58>
    }
	  return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_MspInit+0x44>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <HAL_MspInit+0x44>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6613      	str	r3, [r2, #96]	; 0x60
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_MspInit+0x44>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x44>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x44>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x44>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0ac      	sub	sp, #176	; 0xb0
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2288      	movs	r2, #136	; 0x88
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 fb81 	bl	8005260 <memset>
  if(hi2c->Instance==I2C1)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <HAL_I2C_MspInit+0xb0>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d13b      	bne.n	8000be0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b68:	2340      	movs	r3, #64	; 0x40
 8000b6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 f893 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b80:	f7ff fefa 	bl	8000978 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_I2C_MspInit+0xb4>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	4a18      	ldr	r2, [pc, #96]	; (8000bec <HAL_I2C_MspInit+0xb4>)
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_I2C_MspInit+0xb4>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba4:	2312      	movs	r3, #18
 8000ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <HAL_I2C_MspInit+0xb8>)
 8000bc4:	f000 fb78 	bl	80012b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_I2C_MspInit+0xb4>)
 8000bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_I2C_MspInit+0xb4>)
 8000bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_I2C_MspInit+0xb4>)
 8000bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	37b0      	adds	r7, #176	; 0xb0
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40005400 	.word	0x40005400
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48000400 	.word	0x48000400

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0ae      	sub	sp, #184	; 0xb8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	2288      	movs	r2, #136	; 0x88
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 fb23 	bl	8005260 <memset>
  if(huart->Instance==USART1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a4b      	ldr	r2, [pc, #300]	; (8000d4c <HAL_UART_MspInit+0x158>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d145      	bne.n	8000cb0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 f835 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c3c:	f7ff fe9c 	bl	8000978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c40:	4b43      	ldr	r3, [pc, #268]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c44:	4a42      	ldr	r2, [pc, #264]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4c:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5c:	4a3c      	ldr	r2, [pc, #240]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c64:	4b3a      	ldr	r3, [pc, #232]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9a:	f000 fb0d 	bl	80012b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2025      	movs	r0, #37	; 0x25
 8000ca4:	f000 fa53 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ca8:	2025      	movs	r0, #37	; 0x25
 8000caa:	f000 fa6c 	bl	8001186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cae:	e048      	b.n	8000d42 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <HAL_UART_MspInit+0x160>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d143      	bne.n	8000d42 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 ffea 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000cd2:	f7ff fe51 	bl	8000978 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_UART_MspInit+0x15c>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d06:	230c      	movs	r3, #12
 8000d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2e:	f000 fac3 	bl	80012b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2026      	movs	r0, #38	; 0x26
 8000d38:	f000 fa09 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d3c:	2026      	movs	r0, #38	; 0x26
 8000d3e:	f000 fa22 	bl	8001186 <HAL_NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	37b8      	adds	r7, #184	; 0xb8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40013800 	.word	0x40013800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40004400 	.word	0x40004400

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 f8b4 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8000db0:	2002      	movs	r0, #2
 8000db2:	f000 fc43 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}

08000dba <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8000dbe:	2010      	movs	r0, #16
 8000dc0:	f000 fc3c 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <USART1_IRQHandler+0x10>)
 8000dce:	f002 fd47 	bl	8003860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000007c 	.word	0x2000007c

08000ddc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <USART2_IRQHandler+0x10>)
 8000de2:	f002 fd3d 	bl	8003860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000104 	.word	0x20000104

08000df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e18:	f7ff ffea 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	; (8000e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <LoopForever+0xe>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	; (8000e60 <LoopForever+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e42:	f004 fa15 	bl	8005270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e46:	f7ff fb7f 	bl	8000548 <main>

08000e4a <LoopForever>:

LoopForever:
    b LoopForever
 8000e4a:	e7fe      	b.n	8000e4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e58:	08005958 	.word	0x08005958
  ldr r2, =_sbss
 8000e5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e60:	200005c8 	.word	0x200005c8

08000e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_2_IRQHandler>

08000e66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f961 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f80e 	bl	8000e98 <HAL_InitTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	e001      	b.n	8000e8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e88:	f7ff fe32 	bl	8000af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_InitTick+0x6c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d023      	beq.n	8000ef4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_InitTick+0x70>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_InitTick+0x6c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f96d 	bl	80011a2 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10f      	bne.n	8000eee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d809      	bhi.n	8000ee8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f937 	bl	800114e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_InitTick+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e004      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e001      	b.n	8000ef8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	200001bc 	.word	0x200001bc

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200001bc 	.word	0x200001bc

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff29 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff3e 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff8e 	bl	800108c <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff31 	bl	8000ffc <__NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa2 	bl	80010f4 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d008      	beq.n	80011e4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2204      	movs	r2, #4
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e022      	b.n	800122a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 020e 	bic.w	r2, r2, #14
 80011f2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	f003 021c 	and.w	r2, r3, #28
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f202 	lsl.w	r2, r1, r2
 8001216:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d005      	beq.n	800125a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2204      	movs	r2, #4
 8001252:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e029      	b.n	80012ae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 020e 	bic.w	r2, r2, #14
 8001268:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f003 021c 	and.w	r2, r3, #28
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	4798      	blx	r3
    }
  }
  return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c6:	e17f      	b.n	80015c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2101      	movs	r1, #1
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8171 	beq.w	80015c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d005      	beq.n	80012f8 <HAL_GPIO_Init+0x40>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d130      	bne.n	800135a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800132e:	2201      	movs	r2, #1
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	f003 0201 	and.w	r2, r3, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b03      	cmp	r3, #3
 8001364:	d118      	bne.n	8001398 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800136c:	2201      	movs	r2, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	f003 0201 	and.w	r2, r3, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d017      	beq.n	80013d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d123      	bne.n	8001428 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	6939      	ldr	r1, [r7, #16]
 8001424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0203 	and.w	r2, r3, #3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80ac 	beq.w	80015c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <HAL_GPIO_Init+0x330>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146e:	4a5e      	ldr	r2, [pc, #376]	; (80015e8 <HAL_GPIO_Init+0x330>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6613      	str	r3, [r2, #96]	; 0x60
 8001476:	4b5c      	ldr	r3, [pc, #368]	; (80015e8 <HAL_GPIO_Init+0x330>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001482:	4a5a      	ldr	r2, [pc, #360]	; (80015ec <HAL_GPIO_Init+0x334>)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ac:	d025      	beq.n	80014fa <HAL_GPIO_Init+0x242>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4f      	ldr	r2, [pc, #316]	; (80015f0 <HAL_GPIO_Init+0x338>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01f      	beq.n	80014f6 <HAL_GPIO_Init+0x23e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <HAL_GPIO_Init+0x33c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_GPIO_Init+0x23a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4d      	ldr	r2, [pc, #308]	; (80015f8 <HAL_GPIO_Init+0x340>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x236>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	; (80015fc <HAL_GPIO_Init+0x344>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x232>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <HAL_GPIO_Init+0x348>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x22e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4a      	ldr	r2, [pc, #296]	; (8001604 <HAL_GPIO_Init+0x34c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x22a>
 80014de:	2306      	movs	r3, #6
 80014e0:	e00c      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014e2:	2307      	movs	r3, #7
 80014e4:	e00a      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014e6:	2305      	movs	r3, #5
 80014e8:	e008      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014ea:	2304      	movs	r3, #4
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014ee:	2303      	movs	r3, #3
 80014f0:	e004      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x244>
 80014fa:	2300      	movs	r3, #0
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	f002 0203 	and.w	r2, r2, #3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4093      	lsls	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150c:	4937      	ldr	r1, [pc, #220]	; (80015ec <HAL_GPIO_Init+0x334>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_GPIO_Init+0x350>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800153e:	4a32      	ldr	r2, [pc, #200]	; (8001608 <HAL_GPIO_Init+0x350>)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <HAL_GPIO_Init+0x350>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001568:	4a27      	ldr	r2, [pc, #156]	; (8001608 <HAL_GPIO_Init+0x350>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_GPIO_Init+0x350>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001592:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_GPIO_Init+0x350>)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_GPIO_Init+0x350>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <HAL_GPIO_Init+0x350>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa22 f303 	lsr.w	r3, r2, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f47f ae78 	bne.w	80012c8 <HAL_GPIO_Init+0x10>
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000
 80015f0:	48000400 	.word	0x48000400
 80015f4:	48000800 	.word	0x48000800
 80015f8:	48000c00 	.word	0x48000c00
 80015fc:	48001000 	.word	0x48001000
 8001600:	48001400 	.word	0x48001400
 8001604:	48001800 	.word	0x48001800
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
 8001618:	4613      	mov	r3, r2
 800161a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800161c:	787b      	ldrb	r3, [r7, #1]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001628:	e002      	b.n	8001630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff68 	bl	8000530 <HAL_GPIO_EXTI_Callback>
  }
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e08d      	b.n	800179a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fa50 	bl	8000b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2224      	movs	r2, #36	; 0x24
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	e006      	b.n	80016f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d108      	bne.n	800170e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	e007      	b.n	800171e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800171c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69d9      	ldr	r1, [r3, #28]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1a      	ldr	r2, [r3, #32]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	4608      	mov	r0, r1
 80017ae:	4611      	mov	r1, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	817b      	strh	r3, [r7, #10]
 80017b6:	460b      	mov	r3, r1
 80017b8:	813b      	strh	r3, [r7, #8]
 80017ba:	4613      	mov	r3, r2
 80017bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	f040 80f9 	bne.w	80019be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_I2C_Mem_Write+0x34>
 80017d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0ed      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_I2C_Mem_Write+0x4e>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e0e6      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017fa:	f7ff fb9d 	bl	8000f38 <HAL_GetTick>
 80017fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2319      	movs	r3, #25
 8001806:	2201      	movs	r2, #1
 8001808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 f955 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0d1      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2221      	movs	r2, #33	; 0x21
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a3a      	ldr	r2, [r7, #32]
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800183c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001844:	88f8      	ldrh	r0, [r7, #6]
 8001846:	893a      	ldrh	r2, [r7, #8]
 8001848:	8979      	ldrh	r1, [r7, #10]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	4603      	mov	r3, r0
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 f8b9 	bl	80019cc <I2C_RequestMemoryWrite>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0a9      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001870:	b29b      	uxth	r3, r3
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d90e      	bls.n	8001894 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	22ff      	movs	r2, #255	; 0xff
 800187a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001880:	b2da      	uxtb	r2, r3
 8001882:	8979      	ldrh	r1, [r7, #10]
 8001884:	2300      	movs	r3, #0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 fad9 	bl	8001e44 <I2C_TransferConfig>
 8001892:	e00f      	b.n	80018b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	8979      	ldrh	r1, [r7, #10]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fac8 	bl	8001e44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 f958 	bl	8001b6e <I2C_WaitOnTXISFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e07b      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d034      	beq.n	800196c <HAL_I2C_Mem_Write+0x1c8>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	d130      	bne.n	800196c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	2200      	movs	r2, #0
 8001912:	2180      	movs	r1, #128	; 0x80
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f8d1 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e04d      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	2bff      	cmp	r3, #255	; 0xff
 800192c:	d90e      	bls.n	800194c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	22ff      	movs	r2, #255	; 0xff
 8001932:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	b2da      	uxtb	r2, r3
 800193a:	8979      	ldrh	r1, [r7, #10]
 800193c:	2300      	movs	r3, #0
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 fa7d 	bl	8001e44 <I2C_TransferConfig>
 800194a:	e00f      	b.n	800196c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	b2da      	uxtb	r2, r3
 800195c:	8979      	ldrh	r1, [r7, #10]
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fa6c 	bl	8001e44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d19e      	bne.n	80018b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f93e 	bl	8001bfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e01a      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2220      	movs	r2, #32
 8001990:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_I2C_Mem_Write+0x224>)
 800199e:	400b      	ands	r3, r1
 80019a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2220      	movs	r2, #32
 80019a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80019be:	2302      	movs	r3, #2
  }
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	fe00e800 	.word	0xfe00e800

080019cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	817b      	strh	r3, [r7, #10]
 80019de:	460b      	mov	r3, r1
 80019e0:	813b      	strh	r3, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	8979      	ldrh	r1, [r7, #10]
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <I2C_RequestMemoryWrite+0xa4>)
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 fa25 	bl	8001e44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	69b9      	ldr	r1, [r7, #24]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f8b5 	bl	8001b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e02c      	b.n	8001a68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a14:	893b      	ldrh	r3, [r7, #8]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
 8001a1e:	e015      	b.n	8001a4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a20:	893b      	ldrh	r3, [r7, #8]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	69b9      	ldr	r1, [r7, #24]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f89b 	bl	8001b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e012      	b.n	8001a68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a42:	893b      	ldrh	r3, [r7, #8]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2200      	movs	r2, #0
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f830 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	80002000 	.word	0x80002000

08001a74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d103      	bne.n	8001a92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d007      	beq.n	8001ab0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	619a      	str	r2, [r3, #24]
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001acc:	e03b      	b.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 f8d6 	bl	8001c84 <I2C_IsErrorOccurred>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e041      	b.n	8001b66 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d02d      	beq.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aea:	f7ff fa25 	bl	8000f38 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d302      	bcc.n	8001b00 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d122      	bne.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d113      	bne.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f043 0220 	orr.w	r2, r3, #32
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	bf0c      	ite	eq
 8001b56:	2301      	moveq	r3, #1
 8001b58:	2300      	movne	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d0b4      	beq.n	8001ace <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b7a:	e033      	b.n	8001be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68b9      	ldr	r1, [r7, #8]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f87f 	bl	8001c84 <I2C_IsErrorOccurred>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e031      	b.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b96:	d025      	beq.n	8001be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b98:	f7ff f9ce 	bl	8000f38 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d302      	bcc.n	8001bae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d11a      	bne.n	8001be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d013      	beq.n	8001be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e007      	b.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d1c4      	bne.n	8001b7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c08:	e02f      	b.n	8001c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f838 	bl	8001c84 <I2C_IsErrorOccurred>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e02d      	b.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1e:	f7ff f98b 	bl	8000f38 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d302      	bcc.n	8001c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d11a      	bne.n	8001c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	d013      	beq.n	8001c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f043 0220 	orr.w	r2, r3, #32
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e007      	b.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d1c8      	bne.n	8001c0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d068      	beq.n	8001d82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cb8:	e049      	b.n	8001d4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d045      	beq.n	8001d4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cc2:	f7ff f939 	bl	8000f38 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d302      	bcc.n	8001cd8 <I2C_IsErrorOccurred+0x54>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d13a      	bne.n	8001d4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cfa:	d121      	bne.n	8001d40 <I2C_IsErrorOccurred+0xbc>
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d02:	d01d      	beq.n	8001d40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d04:	7cfb      	ldrb	r3, [r7, #19]
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d01a      	beq.n	8001d40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d1a:	f7ff f90d 	bl	8000f38 <HAL_GetTick>
 8001d1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d20:	e00e      	b.n	8001d40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d22:	f7ff f909 	bl	8000f38 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b19      	cmp	r3, #25
 8001d2e:	d907      	bls.n	8001d40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	f043 0320 	orr.w	r3, r3, #32
 8001d36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001d3e:	e006      	b.n	8001d4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d1e9      	bne.n	8001d22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d003      	beq.n	8001d64 <I2C_IsErrorOccurred+0xe0>
 8001d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0aa      	beq.n	8001cba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2220      	movs	r2, #32
 8001d72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00b      	beq.n	8001dac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01c      	beq.n	8001e32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7ff fe3b 	bl	8001a74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <I2C_IsErrorOccurred+0x1bc>)
 8001e0a:	400b      	ands	r3, r1
 8001e0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3728      	adds	r7, #40	; 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	fe00e800 	.word	0xfe00e800

08001e44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	817b      	strh	r3, [r7, #10]
 8001e52:	4613      	mov	r3, r2
 8001e54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e56:	897b      	ldrh	r3, [r7, #10]
 8001e58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e5c:	7a7b      	ldrb	r3, [r7, #9]
 8001e5e:	041b      	lsls	r3, r3, #16
 8001e60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	0d5b      	lsrs	r3, r3, #21
 8001e7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <I2C_TransferConfig+0x60>)
 8001e84:	430b      	orrs	r3, r1
 8001e86:	43db      	mvns	r3, r3
 8001e88:	ea02 0103 	and.w	r1, r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	03ff63ff 	.word	0x03ff63ff

08001ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d138      	bne.n	8001f30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e032      	b.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001efa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d139      	bne.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e033      	b.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2224      	movs	r2, #36	; 0x24
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40007000 	.word	0x40007000

08001ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002002:	d130      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800200c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002010:	d038      	beq.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800201a:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002020:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2232      	movs	r2, #50	; 0x32
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0c9b      	lsrs	r3, r3, #18
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002038:	e002      	b.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3b01      	subs	r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204c:	d102      	bne.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x60>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f2      	bne.n	800203a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002060:	d110      	bne.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e00f      	b.n	8002086 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002072:	d007      	beq.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800207c:	4a05      	ldr	r2, [pc, #20]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002082:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40007000 	.word	0x40007000
 8002098:	20000000 	.word	0x20000000
 800209c:	431bde83 	.word	0x431bde83

080020a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e3ca      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b2:	4b97      	ldr	r3, [pc, #604]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020bc:	4b94      	ldr	r3, [pc, #592]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80e4 	beq.w	800229c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <HAL_RCC_OscConfig+0x4a>
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b0c      	cmp	r3, #12
 80020de:	f040 808b 	bne.w	80021f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	f040 8087 	bne.w	80021f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ea:	4b89      	ldr	r3, [pc, #548]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_RCC_OscConfig+0x62>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e3a2      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1a      	ldr	r2, [r3, #32]
 8002106:	4b82      	ldr	r3, [pc, #520]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <HAL_RCC_OscConfig+0x7c>
 8002112:	4b7f      	ldr	r3, [pc, #508]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800211a:	e005      	b.n	8002128 <HAL_RCC_OscConfig+0x88>
 800211c:	4b7c      	ldr	r3, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002128:	4293      	cmp	r3, r2
 800212a:	d223      	bcs.n	8002174 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fd55 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e383      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002140:	4b73      	ldr	r3, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a72      	ldr	r2, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002146:	f043 0308 	orr.w	r3, r3, #8
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b70      	ldr	r3, [pc, #448]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	496d      	ldr	r1, [pc, #436]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800215e:	4b6c      	ldr	r3, [pc, #432]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	4968      	ldr	r1, [pc, #416]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
 8002172:	e025      	b.n	80021c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002174:	4b66      	ldr	r3, [pc, #408]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a65      	ldr	r2, [pc, #404]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800217a:	f043 0308 	orr.w	r3, r3, #8
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4960      	ldr	r1, [pc, #384]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002192:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	495b      	ldr	r1, [pc, #364]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fd15 	bl	8002be0 <RCC_SetFlashLatencyFromMSIRange>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e343      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c0:	f000 fc4a 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b52      	ldr	r3, [pc, #328]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	4950      	ldr	r1, [pc, #320]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
 80021dc:	4a4e      	ldr	r2, [pc, #312]	; (8002318 <HAL_RCC_OscConfig+0x278>)
 80021de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021e0:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCC_OscConfig+0x27c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fe57 	bl	8000e98 <HAL_InitTick>
 80021ea:	4603      	mov	r3, r0
 80021ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d052      	beq.n	800229a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	e327      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d032      	beq.n	8002266 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002200:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a42      	ldr	r2, [pc, #264]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800220c:	f7fe fe94 	bl	8000f38 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002214:	f7fe fe90 	bl	8000f38 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e310      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002226:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a36      	ldr	r2, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4931      	ldr	r1, [pc, #196]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002250:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	492c      	ldr	r1, [pc, #176]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
 8002264:	e01a      	b.n	800229c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a29      	ldr	r2, [pc, #164]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002272:	f7fe fe61 	bl	8000f38 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800227a:	f7fe fe5d 	bl	8000f38 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e2dd      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x1da>
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800229a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d074      	beq.n	8002392 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d005      	beq.n	80022ba <HAL_RCC_OscConfig+0x21a>
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d10e      	bne.n	80022d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d10b      	bne.n	80022d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d064      	beq.n	8002390 <HAL_RCC_OscConfig+0x2f0>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d160      	bne.n	8002390 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e2ba      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x24a>
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e026      	b.n	8002338 <HAL_RCC_OscConfig+0x298>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f2:	d115      	bne.n	8002320 <HAL_RCC_OscConfig+0x280>
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a05      	ldr	r2, [pc, #20]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a02      	ldr	r2, [pc, #8]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e014      	b.n	8002338 <HAL_RCC_OscConfig+0x298>
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	08005304 	.word	0x08005304
 8002318:	20000000 	.word	0x20000000
 800231c:	20000004 	.word	0x20000004
 8002320:	4ba0      	ldr	r3, [pc, #640]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a9f      	ldr	r2, [pc, #636]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b9d      	ldr	r3, [pc, #628]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a9c      	ldr	r2, [pc, #624]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fdfa 	bl	8000f38 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe fdf6 	bl	8000f38 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e276      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235a:	4b92      	ldr	r3, [pc, #584]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x2a8>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fde6 	bl	8000f38 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fde2 	bl	8000f38 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e262      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002382:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x2d0>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d060      	beq.n	8002460 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_OscConfig+0x310>
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d119      	bne.n	80023de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d116      	bne.n	80023de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b0:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_OscConfig+0x328>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e23f      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	4973      	ldr	r1, [pc, #460]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	e040      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d023      	beq.n	800242e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e6:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6e      	ldr	r2, [pc, #440]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe fda1 	bl	8000f38 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fa:	f7fe fd9d 	bl	8000f38 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e21d      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240c:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	495f      	ldr	r1, [pc, #380]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e018      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b5d      	ldr	r3, [pc, #372]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a5c      	ldr	r2, [pc, #368]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe fd7d 	bl	8000f38 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002442:	f7fe fd79 	bl	8000f38 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e1f9      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002454:	4b53      	ldr	r3, [pc, #332]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d03c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01c      	beq.n	80024ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002474:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247a:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7fe fd58 	bl	8000f38 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248c:	f7fe fd54 	bl	8000f38 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1d4      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ef      	beq.n	800248c <HAL_RCC_OscConfig+0x3ec>
 80024ac:	e01b      	b.n	80024e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ae:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b4:	4a3b      	ldr	r2, [pc, #236]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe fd3b 	bl	8000f38 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7fe fd37 	bl	8000f38 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1b7      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d8:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ef      	bne.n	80024c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80a6 	beq.w	8002640 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024f8:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250e:	6593      	str	r3, [r2, #88]	; 0x58
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251c:	2301      	movs	r3, #1
 800251e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d118      	bne.n	800255e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002538:	f7fe fcfe 	bl	8000f38 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002540:	f7fe fcfa 	bl	8000f38 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e17a      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d108      	bne.n	8002578 <HAL_RCC_OscConfig+0x4d8>
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002576:	e029      	b.n	80025cc <HAL_RCC_OscConfig+0x52c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d115      	bne.n	80025ac <HAL_RCC_OscConfig+0x50c>
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a0:	e014      	b.n	80025cc <HAL_RCC_OscConfig+0x52c>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
 80025ac:	4b9c      	ldr	r3, [pc, #624]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	4a9b      	ldr	r2, [pc, #620]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025bc:	4b98      	ldr	r3, [pc, #608]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	4a97      	ldr	r2, [pc, #604]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d016      	beq.n	8002602 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fe fcb0 	bl	8000f38 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7fe fcac 	bl	8000f38 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e12a      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f2:	4b8b      	ldr	r3, [pc, #556]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ed      	beq.n	80025dc <HAL_RCC_OscConfig+0x53c>
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7fe fc99 	bl	8000f38 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fc95 	bl	8000f38 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e113      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002620:	4b7f      	ldr	r3, [pc, #508]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ed      	bne.n	800260a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b7a      	ldr	r3, [pc, #488]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	4a79      	ldr	r2, [pc, #484]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 800263a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80fe 	beq.w	8002846 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	2b02      	cmp	r3, #2
 8002650:	f040 80d0 	bne.w	80027f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002654:	4b72      	ldr	r3, [pc, #456]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0203 	and.w	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	429a      	cmp	r2, r3
 8002666:	d130      	bne.n	80026ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	3b01      	subs	r3, #1
 8002674:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d127      	bne.n	80026ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002684:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d11f      	bne.n	80026ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002694:	2a07      	cmp	r2, #7
 8002696:	bf14      	ite	ne
 8002698:	2201      	movne	r2, #1
 800269a:	2200      	moveq	r2, #0
 800269c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800269e:	4293      	cmp	r3, r2
 80026a0:	d113      	bne.n	80026ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	085b      	lsrs	r3, r3, #1
 80026ae:	3b01      	subs	r3, #1
 80026b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d109      	bne.n	80026ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	3b01      	subs	r3, #1
 80026c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d06e      	beq.n	80027a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d069      	beq.n	80027a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d105      	bne.n	80026e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0ad      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026ec:	4b4c      	ldr	r3, [pc, #304]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a4b      	ldr	r2, [pc, #300]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80026f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026f8:	f7fe fc1e 	bl	8000f38 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe fc1a 	bl	8000f38 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e09a      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002712:	4b43      	ldr	r3, [pc, #268]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271e:	4b40      	ldr	r3, [pc, #256]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	4b40      	ldr	r3, [pc, #256]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800272e:	3a01      	subs	r2, #1
 8002730:	0112      	lsls	r2, r2, #4
 8002732:	4311      	orrs	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002738:	0212      	lsls	r2, r2, #8
 800273a:	4311      	orrs	r1, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002740:	0852      	lsrs	r2, r2, #1
 8002742:	3a01      	subs	r2, #1
 8002744:	0552      	lsls	r2, r2, #21
 8002746:	4311      	orrs	r1, r2
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800274c:	0852      	lsrs	r2, r2, #1
 800274e:	3a01      	subs	r2, #1
 8002750:	0652      	lsls	r2, r2, #25
 8002752:	4311      	orrs	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002758:	0912      	lsrs	r2, r2, #4
 800275a:	0452      	lsls	r2, r2, #17
 800275c:	430a      	orrs	r2, r1
 800275e:	4930      	ldr	r1, [pc, #192]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 8002760:	4313      	orrs	r3, r2
 8002762:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002764:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2d      	ldr	r2, [pc, #180]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 800276a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800276e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a2a      	ldr	r2, [pc, #168]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 8002776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800277c:	f7fe fbdc 	bl	8000f38 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002784:	f7fe fbd8 	bl	8000f38 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e058      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027a2:	e050      	b.n	8002846 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e04f      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d148      	bne.n	8002846 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027b4:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a16      	ldr	r2, [pc, #88]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027cc:	f7fe fbb4 	bl	8000f38 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7fe fbb0 	bl	8000f38 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e030      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x734>
 80027f2:	e028      	b.n	8002846 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d023      	beq.n	8002842 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <HAL_RCC_OscConfig+0x780>)
 8002800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fb97 	bl	8000f38 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280c:	e00c      	b.n	8002828 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe fb93 	bl	8000f38 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d905      	bls.n	8002828 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e013      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
 8002820:	40021000 	.word	0x40021000
 8002824:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_OscConfig+0x7b0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ec      	bne.n	800280e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_OscConfig+0x7b0>)
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	4905      	ldr	r1, [pc, #20]	; (8002850 <HAL_RCC_OscConfig+0x7b0>)
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_RCC_OscConfig+0x7b4>)
 800283c:	4013      	ands	r3, r2
 800283e:	60cb      	str	r3, [r1, #12]
 8002840:	e001      	b.n	8002846 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	feeefffc 	.word	0xfeeefffc

08002858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0e7      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b75      	ldr	r3, [pc, #468]	; (8002a44 <HAL_RCC_ClockConfig+0x1ec>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d910      	bls.n	800289c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b72      	ldr	r3, [pc, #456]	; (8002a44 <HAL_RCC_ClockConfig+0x1ec>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	4970      	ldr	r1, [pc, #448]	; (8002a44 <HAL_RCC_ClockConfig+0x1ec>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b6e      	ldr	r3, [pc, #440]	; (8002a44 <HAL_RCC_ClockConfig+0x1ec>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0cf      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d010      	beq.n	80028ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d908      	bls.n	80028ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b8:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4960      	ldr	r1, [pc, #384]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d04c      	beq.n	8002970 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028de:	4b5a      	ldr	r3, [pc, #360]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d121      	bne.n	800292e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0a6      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f6:	4b54      	ldr	r3, [pc, #336]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d115      	bne.n	800292e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e09a      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800290e:	4b4e      	ldr	r3, [pc, #312]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e08e      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800291e:	4b4a      	ldr	r3, [pc, #296]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e086      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800292e:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f023 0203 	bic.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4943      	ldr	r1, [pc, #268]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002940:	f7fe fafa 	bl	8000f38 <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	e00a      	b.n	800295e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002948:	f7fe faf6 	bl	8000f38 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e06e      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 020c 	and.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	429a      	cmp	r2, r3
 800296e:	d1eb      	bne.n	8002948 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d010      	beq.n	800299e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002988:	429a      	cmp	r2, r3
 800298a:	d208      	bcs.n	800299e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298c:	4b2e      	ldr	r3, [pc, #184]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	492b      	ldr	r1, [pc, #172]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800299e:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_RCC_ClockConfig+0x1ec>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d210      	bcs.n	80029ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_RCC_ClockConfig+0x1ec>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 0207 	bic.w	r2, r3, #7
 80029b4:	4923      	ldr	r1, [pc, #140]	; (8002a44 <HAL_RCC_ClockConfig+0x1ec>)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029bc:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <HAL_RCC_ClockConfig+0x1ec>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e036      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	4918      	ldr	r1, [pc, #96]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4910      	ldr	r1, [pc, #64]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a0c:	f000 f824 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <HAL_RCC_ClockConfig+0x1f0>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	490b      	ldr	r1, [pc, #44]	; (8002a4c <HAL_RCC_ClockConfig+0x1f4>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
 8002a28:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_ClockConfig+0x1fc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe fa31 	bl	8000e98 <HAL_InitTick>
 8002a36:	4603      	mov	r3, r0
 8002a38:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40022000 	.word	0x40022000
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08005304 	.word	0x08005304
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a66:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a70:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x34>
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d121      	bne.n	8002aca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d11e      	bne.n	8002aca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a8c:	4b34      	ldr	r3, [pc, #208]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a98:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	e005      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002aa8:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10d      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d102      	bne.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ad0:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	e004      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002adc:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ade:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b0c      	cmp	r3, #12
 8002ae4:	d134      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0xa6>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d003      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0xac>
 8002afc:	e005      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b00:	617b      	str	r3, [r7, #20]
      break;
 8002b02:	e005      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b06:	617b      	str	r3, [r7, #20]
      break;
 8002b08:	e002      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	617b      	str	r3, [r7, #20]
      break;
 8002b0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	fb03 f202 	mul.w	r2, r3, r2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	0e5b      	lsrs	r3, r3, #25
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	3301      	adds	r3, #1
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b50:	69bb      	ldr	r3, [r7, #24]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3724      	adds	r7, #36	; 0x24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	0800531c 	.word	0x0800531c
 8002b68:	00f42400 	.word	0x00f42400
 8002b6c:	007a1200 	.word	0x007a1200

08002b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000000 	.word	0x20000000

08002b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b8c:	f7ff fff0 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08005314 	.word	0x08005314

08002bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bb8:	f7ff ffda 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0adb      	lsrs	r3, r3, #11
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4904      	ldr	r1, [pc, #16]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08005314 	.word	0x08005314

08002be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bec:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bf8:	f7ff f9ee 	bl	8001fd8 <HAL_PWREx_GetVoltageRange>
 8002bfc:	6178      	str	r0, [r7, #20]
 8002bfe:	e014      	b.n	8002c2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c18:	f7ff f9de 	bl	8001fd8 <HAL_PWREx_GetVoltageRange>
 8002c1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c30:	d10b      	bne.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d919      	bls.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c3c:	d902      	bls.n	8002c44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c3e:	2302      	movs	r3, #2
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	e013      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	e010      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b80      	cmp	r3, #128	; 0x80
 8002c4e:	d902      	bls.n	8002c56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c50:	2303      	movs	r3, #3
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	e00a      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d102      	bne.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	e004      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d101      	bne.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c68:	2301      	movs	r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 0207 	bic.w	r2, r3, #7
 8002c74:	4909      	ldr	r1, [pc, #36]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40022000 	.word	0x40022000

08002ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ca8:	2300      	movs	r3, #0
 8002caa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cac:	2300      	movs	r3, #0
 8002cae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d041      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cc4:	d02a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cca:	d824      	bhi.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ccc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cd6:	d81e      	bhi.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ce2:	e018      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ce4:	4b86      	ldr	r3, [pc, #536]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4a85      	ldr	r2, [pc, #532]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cf0:	e015      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fabb 	bl	8003274 <RCCEx_PLLSAI1_Config>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d02:	e00c      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3320      	adds	r3, #32
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fba6 	bl	800345c <RCCEx_PLLSAI2_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d14:	e003      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	74fb      	strb	r3, [r7, #19]
      break;
 8002d1a:	e000      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d24:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d32:	4973      	ldr	r1, [pc, #460]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d3a:	e001      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d041      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d54:	d02a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d5a:	d824      	bhi.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d60:	d008      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d66:	d81e      	bhi.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d70:	d010      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d72:	e018      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d74:	4b62      	ldr	r3, [pc, #392]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a61      	ldr	r2, [pc, #388]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d80:	e015      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fa73 	bl	8003274 <RCCEx_PLLSAI1_Config>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d92:	e00c      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3320      	adds	r3, #32
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fb5e 	bl	800345c <RCCEx_PLLSAI2_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002da4:	e003      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	74fb      	strb	r3, [r7, #19]
      break;
 8002daa:	e000      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002db4:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc2:	494f      	ldr	r1, [pc, #316]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dca:	e001      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80a0 	beq.w	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	4a40      	ldr	r2, [pc, #256]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e02:	6593      	str	r3, [r2, #88]	; 0x58
 8002e04:	4b3e      	ldr	r3, [pc, #248]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e10:	2301      	movs	r3, #1
 8002e12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e14:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a3a      	ldr	r2, [pc, #232]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e20:	f7fe f88a 	bl	8000f38 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e26:	e009      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e28:	f7fe f886 	bl	8000f38 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d902      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	74fb      	strb	r3, [r7, #19]
        break;
 8002e3a:	e005      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e3c:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ef      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d15c      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e4e:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01f      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d019      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	4a20      	ldr	r2, [pc, #128]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d016      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fe f845 	bl	8000f38 <HAL_GetTick>
 8002eae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb0:	e00b      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe f841 	bl	8000f38 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d902      	bls.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ec8:	e006      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ec      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ed8:	7cfb      	ldrb	r3, [r7, #19]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eee:	4904      	ldr	r1, [pc, #16]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ef6:	e009      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	74bb      	strb	r3, [r7, #18]
 8002efc:	e006      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0c:	7c7b      	ldrb	r3, [r7, #17]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d105      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f12:	4b9e      	ldr	r3, [pc, #632]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	4a9d      	ldr	r2, [pc, #628]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f2a:	4b98      	ldr	r3, [pc, #608]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f30:	f023 0203 	bic.w	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	4994      	ldr	r1, [pc, #592]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f4c:	4b8f      	ldr	r3, [pc, #572]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f023 020c 	bic.w	r2, r3, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	498c      	ldr	r1, [pc, #560]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f6e:	4b87      	ldr	r3, [pc, #540]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	4983      	ldr	r1, [pc, #524]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f90:	4b7e      	ldr	r3, [pc, #504]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	497b      	ldr	r1, [pc, #492]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc0:	4972      	ldr	r1, [pc, #456]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fd4:	4b6d      	ldr	r3, [pc, #436]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	496a      	ldr	r1, [pc, #424]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	4961      	ldr	r1, [pc, #388]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003018:	4b5c      	ldr	r3, [pc, #368]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003026:	4959      	ldr	r1, [pc, #356]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800303a:	4b54      	ldr	r3, [pc, #336]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003040:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	4950      	ldr	r1, [pc, #320]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800305c:	4b4b      	ldr	r3, [pc, #300]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	4948      	ldr	r1, [pc, #288]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800307e:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	493f      	ldr	r1, [pc, #252]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d028      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a0:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ae:	4937      	ldr	r1, [pc, #220]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030be:	d106      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c0:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a31      	ldr	r2, [pc, #196]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ca:	60d3      	str	r3, [r2, #12]
 80030cc:	e011      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030d6:	d10c      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	2101      	movs	r1, #1
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f8c8 	bl	8003274 <RCCEx_PLLSAI1_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d028      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	491f      	ldr	r1, [pc, #124]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800311c:	d106      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800311e:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4a1a      	ldr	r2, [pc, #104]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003128:	60d3      	str	r3, [r2, #12]
 800312a:	e011      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003134:	d10c      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	2101      	movs	r1, #1
 800313c:	4618      	mov	r0, r3
 800313e:	f000 f899 	bl	8003274 <RCCEx_PLLSAI1_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d02b      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316a:	4908      	ldr	r1, [pc, #32]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800317a:	d109      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a02      	ldr	r2, [pc, #8]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003186:	60d3      	str	r3, [r2, #12]
 8003188:	e014      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3304      	adds	r3, #4
 800319e:	2101      	movs	r1, #1
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 f867 	bl	8003274 <RCCEx_PLLSAI1_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d02f      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031c0:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ce:	4928      	ldr	r1, [pc, #160]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031de:	d10d      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	2102      	movs	r1, #2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f844 	bl	8003274 <RCCEx_PLLSAI1_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d014      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	74bb      	strb	r3, [r7, #18]
 80031fa:	e011      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003204:	d10c      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3320      	adds	r3, #32
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f925 	bl	800345c <RCCEx_PLLSAI2_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003216:	7cfb      	ldrb	r3, [r7, #19]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800323a:	490d      	ldr	r1, [pc, #52]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325e:	4904      	ldr	r1, [pc, #16]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003266:	7cbb      	ldrb	r3, [r7, #18]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000

08003274 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003282:	4b75      	ldr	r3, [pc, #468]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d018      	beq.n	80032c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800328e:	4b72      	ldr	r3, [pc, #456]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0203 	and.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d10d      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
       ||
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032a6:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
       ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d047      	beq.n	800334a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
 80032be:	e044      	b.n	800334a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d018      	beq.n	80032fa <RCCEx_PLLSAI1_Config+0x86>
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d825      	bhi.n	8003318 <RCCEx_PLLSAI1_Config+0xa4>
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d002      	beq.n	80032d6 <RCCEx_PLLSAI1_Config+0x62>
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d009      	beq.n	80032e8 <RCCEx_PLLSAI1_Config+0x74>
 80032d4:	e020      	b.n	8003318 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032d6:	4b60      	ldr	r3, [pc, #384]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d11d      	bne.n	800331e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e6:	e01a      	b.n	800331e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032e8:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d116      	bne.n	8003322 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f8:	e013      	b.n	8003322 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032fa:	4b57      	ldr	r3, [pc, #348]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003306:	4b54      	ldr	r3, [pc, #336]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003316:	e006      	b.n	8003326 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	e004      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800331e:	bf00      	nop
 8003320:	e002      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003322:	bf00      	nop
 8003324:	e000      	b.n	8003328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003326:	bf00      	nop
    }

    if(status == HAL_OK)
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	3b01      	subs	r3, #1
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	430b      	orrs	r3, r1
 8003344:	4944      	ldr	r1, [pc, #272]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d17d      	bne.n	800344c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003350:	4b41      	ldr	r3, [pc, #260]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a40      	ldr	r2, [pc, #256]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003356:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800335a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335c:	f7fd fdec 	bl	8000f38 <HAL_GetTick>
 8003360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003362:	e009      	b.n	8003378 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003364:	f7fd fde8 	bl	8000f38 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d902      	bls.n	8003378 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	73fb      	strb	r3, [r7, #15]
        break;
 8003376:	e005      	b.n	8003384 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003378:	4b37      	ldr	r3, [pc, #220]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ef      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d160      	bne.n	800344c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6892      	ldr	r2, [r2, #8]
 80033a0:	0211      	lsls	r1, r2, #8
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68d2      	ldr	r2, [r2, #12]
 80033a6:	0912      	lsrs	r2, r2, #4
 80033a8:	0452      	lsls	r2, r2, #17
 80033aa:	430a      	orrs	r2, r1
 80033ac:	492a      	ldr	r1, [pc, #168]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	610b      	str	r3, [r1, #16]
 80033b2:	e027      	b.n	8003404 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d112      	bne.n	80033e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ba:	4b27      	ldr	r3, [pc, #156]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6892      	ldr	r2, [r2, #8]
 80033ca:	0211      	lsls	r1, r2, #8
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6912      	ldr	r2, [r2, #16]
 80033d0:	0852      	lsrs	r2, r2, #1
 80033d2:	3a01      	subs	r2, #1
 80033d4:	0552      	lsls	r2, r2, #21
 80033d6:	430a      	orrs	r2, r1
 80033d8:	491f      	ldr	r1, [pc, #124]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	610b      	str	r3, [r1, #16]
 80033de:	e011      	b.n	8003404 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6892      	ldr	r2, [r2, #8]
 80033f0:	0211      	lsls	r1, r2, #8
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6952      	ldr	r2, [r2, #20]
 80033f6:	0852      	lsrs	r2, r2, #1
 80033f8:	3a01      	subs	r2, #1
 80033fa:	0652      	lsls	r2, r2, #25
 80033fc:	430a      	orrs	r2, r1
 80033fe:	4916      	ldr	r1, [pc, #88]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a13      	ldr	r2, [pc, #76]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 800340a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800340e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fd fd92 	bl	8000f38 <HAL_GetTick>
 8003414:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003416:	e009      	b.n	800342c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003418:	f7fd fd8e 	bl	8000f38 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d902      	bls.n	800342c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	73fb      	strb	r3, [r7, #15]
          break;
 800342a:	e005      	b.n	8003438 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ef      	beq.n	8003418 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	4904      	ldr	r1, [pc, #16]	; (8003458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003448:	4313      	orrs	r3, r2
 800344a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000

0800345c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800346a:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d018      	beq.n	80034a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003476:	4b67      	ldr	r3, [pc, #412]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0203 	and.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d10d      	bne.n	80034a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
       ||
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800348e:	4b61      	ldr	r3, [pc, #388]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
       ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d047      	beq.n	8003532 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	e044      	b.n	8003532 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d018      	beq.n	80034e2 <RCCEx_PLLSAI2_Config+0x86>
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d825      	bhi.n	8003500 <RCCEx_PLLSAI2_Config+0xa4>
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d002      	beq.n	80034be <RCCEx_PLLSAI2_Config+0x62>
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d009      	beq.n	80034d0 <RCCEx_PLLSAI2_Config+0x74>
 80034bc:	e020      	b.n	8003500 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034be:	4b55      	ldr	r3, [pc, #340]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d11d      	bne.n	8003506 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ce:	e01a      	b.n	8003506 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034d0:	4b50      	ldr	r3, [pc, #320]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d116      	bne.n	800350a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e0:	e013      	b.n	800350a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034e2:	4b4c      	ldr	r3, [pc, #304]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ee:	4b49      	ldr	r3, [pc, #292]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034fe:	e006      	b.n	800350e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      break;
 8003504:	e004      	b.n	8003510 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800350e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10d      	bne.n	8003532 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003516:	4b3f      	ldr	r3, [pc, #252]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	430b      	orrs	r3, r1
 800352c:	4939      	ldr	r1, [pc, #228]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352e:	4313      	orrs	r3, r2
 8003530:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d167      	bne.n	8003608 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003538:	4b36      	ldr	r3, [pc, #216]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a35      	ldr	r2, [pc, #212]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003544:	f7fd fcf8 	bl	8000f38 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800354a:	e009      	b.n	8003560 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800354c:	f7fd fcf4 	bl	8000f38 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d902      	bls.n	8003560 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	73fb      	strb	r3, [r7, #15]
        break;
 800355e:	e005      	b.n	800356c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003560:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ef      	bne.n	800354c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d14a      	bne.n	8003608 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d111      	bne.n	800359c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6892      	ldr	r2, [r2, #8]
 8003588:	0211      	lsls	r1, r2, #8
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68d2      	ldr	r2, [r2, #12]
 800358e:	0912      	lsrs	r2, r2, #4
 8003590:	0452      	lsls	r2, r2, #17
 8003592:	430a      	orrs	r2, r1
 8003594:	491f      	ldr	r1, [pc, #124]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003596:	4313      	orrs	r3, r2
 8003598:	614b      	str	r3, [r1, #20]
 800359a:	e011      	b.n	80035c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6892      	ldr	r2, [r2, #8]
 80035ac:	0211      	lsls	r1, r2, #8
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6912      	ldr	r2, [r2, #16]
 80035b2:	0852      	lsrs	r2, r2, #1
 80035b4:	3a01      	subs	r2, #1
 80035b6:	0652      	lsls	r2, r2, #25
 80035b8:	430a      	orrs	r2, r1
 80035ba:	4916      	ldr	r1, [pc, #88]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a13      	ldr	r2, [pc, #76]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fd fcb4 	bl	8000f38 <HAL_GetTick>
 80035d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035d2:	e009      	b.n	80035e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035d4:	f7fd fcb0 	bl	8000f38 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d902      	bls.n	80035e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	73fb      	strb	r3, [r7, #15]
          break;
 80035e6:	e005      	b.n	80035f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ef      	beq.n	80035d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4904      	ldr	r1, [pc, #16]	; (8003614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003604:	4313      	orrs	r3, r2
 8003606:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000

08003618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e040      	b.n	80036ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd fada 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	; 0x24
 8003644:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fedc 	bl	800441c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fc21 	bl	8003eac <UART_SetConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e01b      	b.n	80036ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 ff5b 	bl	8004560 <UART_CheckIdleState>
 80036aa:	4603      	mov	r3, r0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d178      	bne.n	80037be <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_UART_Transmit+0x24>
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e071      	b.n	80037c0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2221      	movs	r2, #33	; 0x21
 80036e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ea:	f7fd fc25 	bl	8000f38 <HAL_GetTick>
 80036ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003708:	d108      	bne.n	800371c <HAL_UART_Transmit+0x68>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d104      	bne.n	800371c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	e003      	b.n	8003724 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003724:	e030      	b.n	8003788 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2200      	movs	r2, #0
 800372e:	2180      	movs	r1, #128	; 0x80
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 ffbd 	bl	80046b0 <UART_WaitOnFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e03c      	b.n	80037c0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10b      	bne.n	8003764 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	881a      	ldrh	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003758:	b292      	uxth	r2, r2
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	3302      	adds	r3, #2
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	e008      	b.n	8003776 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	781a      	ldrb	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	b292      	uxth	r2, r2
 800376e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	3301      	adds	r3, #1
 8003774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1c8      	bne.n	8003726 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2200      	movs	r2, #0
 800379c:	2140      	movs	r1, #64	; 0x40
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 ff86 	bl	80046b0 <UART_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e005      	b.n	80037c0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e000      	b.n	80037c0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80037be:	2302      	movs	r3, #2
  }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d137      	bne.n	8003850 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_UART_Receive_IT+0x24>
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e030      	b.n	8003852 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a18      	ldr	r2, [pc, #96]	; (800385c <HAL_UART_Receive_IT+0x94>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d01f      	beq.n	8003840 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d018      	beq.n	8003840 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	613b      	str	r3, [r7, #16]
   return(result);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	69f9      	ldr	r1, [r7, #28]
 8003832:	6a3a      	ldr	r2, [r7, #32]
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	61bb      	str	r3, [r7, #24]
   return(result);
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e6      	bne.n	800380e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	461a      	mov	r2, r3
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 ffa0 	bl	800478c <UART_Start_Receive_IT>
 800384c:	4603      	mov	r3, r0
 800384e:	e000      	b.n	8003852 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3728      	adds	r7, #40	; 0x28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40008000 	.word	0x40008000

08003860 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b0ba      	sub	sp, #232	; 0xe8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003886:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800388a:	f640 030f 	movw	r3, #2063	; 0x80f
 800388e:	4013      	ands	r3, r2
 8003890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d115      	bne.n	80038c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00f      	beq.n	80038c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d009      	beq.n	80038c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 82ca 	beq.w	8003e52 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
      }
      return;
 80038c6:	e2c4      	b.n	8003e52 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80038c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 8117 	beq.w	8003b00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80038e2:	4b85      	ldr	r3, [pc, #532]	; (8003af8 <HAL_UART_IRQHandler+0x298>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 810a 	beq.w	8003b00 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d011      	beq.n	800391c <HAL_UART_IRQHandler+0xbc>
 80038f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800391c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d011      	beq.n	800394c <HAL_UART_IRQHandler+0xec>
 8003928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2202      	movs	r2, #2
 800393a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d011      	beq.n	800397c <HAL_UART_IRQHandler+0x11c>
 8003958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2204      	movs	r2, #4
 800396a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003972:	f043 0202 	orr.w	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800397c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d017      	beq.n	80039b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003998:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00b      	beq.n	80039b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2208      	movs	r2, #8
 80039a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ae:	f043 0208 	orr.w	r2, r3, #8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <HAL_UART_IRQHandler+0x18a>
 80039c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00c      	beq.n	80039ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8230 	beq.w	8003e56 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d04f      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 ff68 	bl	8004918 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	d141      	bne.n	8003ada <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a92:	e841 2300 	strex	r3, r2, [r1]
 8003a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1d9      	bne.n	8003a56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d013      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_UART_IRQHandler+0x29c>)
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd fbbd 	bl	8001236 <HAL_DMA_Abort_IT>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d017      	beq.n	8003af2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003acc:	4610      	mov	r0, r2
 8003ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad0:	e00f      	b.n	8003af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f9d4 	bl	8003e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	e00b      	b.n	8003af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f9d0 	bl	8003e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae0:	e007      	b.n	8003af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f9cc 	bl	8003e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003af0:	e1b1      	b.n	8003e56 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af2:	bf00      	nop
    return;
 8003af4:	e1af      	b.n	8003e56 <HAL_UART_IRQHandler+0x5f6>
 8003af6:	bf00      	nop
 8003af8:	04000120 	.word	0x04000120
 8003afc:	080049e1 	.word	0x080049e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 816a 	bne.w	8003dde <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8163 	beq.w	8003dde <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 815c 	beq.w	8003dde <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2210      	movs	r2, #16
 8003b2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	f040 80d4 	bne.w	8003ce6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80ad 	beq.w	8003cae <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	f080 80a5 	bcs.w	8003cae <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 8086 	bne.w	8003c8c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003baa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1da      	bne.n	8003b80 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3308      	adds	r3, #8
 8003bd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3308      	adds	r3, #8
 8003bea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e1      	bne.n	8003bca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3308      	adds	r3, #8
 8003c26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e3      	bne.n	8003c06 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5c:	f023 0310 	bic.w	r3, r3, #16
 8003c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e4      	bne.n	8003c4c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd fa97 	bl	80011ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f8f4 	bl	8003e94 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003cac:	e0d5      	b.n	8003e5a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	f040 80ce 	bne.w	8003e5a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	f040 80c5 	bne.w	8003e5a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8d8 	bl	8003e94 <HAL_UARTEx_RxEventCallback>
      return;
 8003ce4:	e0b9      	b.n	8003e5a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 80ab 	beq.w	8003e5e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80a6 	beq.w	8003e5e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d34:	647b      	str	r3, [r7, #68]	; 0x44
 8003d36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e4      	bne.n	8003d12 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	623b      	str	r3, [r7, #32]
   return(result);
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3308      	adds	r3, #8
 8003d68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d6c:	633a      	str	r2, [r7, #48]	; 0x30
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e3      	bne.n	8003d48 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f023 0310 	bic.w	r3, r3, #16
 8003da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	69b9      	ldr	r1, [r7, #24]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e4      	bne.n	8003d94 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f85c 	bl	8003e94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ddc:	e03f      	b.n	8003e5e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00e      	beq.n	8003e08 <HAL_UART_IRQHandler+0x5a8>
 8003dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 ffe9 	bl	8004dd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e06:	e02d      	b.n	8003e64 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01c      	beq.n	8003e62 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
    }
    return;
 8003e30:	e017      	b.n	8003e62 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d012      	beq.n	8003e64 <HAL_UART_IRQHandler+0x604>
 8003e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00c      	beq.n	8003e64 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fdde 	bl	8004a0c <UART_EndTransmit_IT>
    return;
 8003e50:	e008      	b.n	8003e64 <HAL_UART_IRQHandler+0x604>
      return;
 8003e52:	bf00      	nop
 8003e54:	e006      	b.n	8003e64 <HAL_UART_IRQHandler+0x604>
    return;
 8003e56:	bf00      	nop
 8003e58:	e004      	b.n	8003e64 <HAL_UART_IRQHandler+0x604>
      return;
 8003e5a:	bf00      	nop
 8003e5c:	e002      	b.n	8003e64 <HAL_UART_IRQHandler+0x604>
      return;
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <HAL_UART_IRQHandler+0x604>
    return;
 8003e62:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e64:	37e8      	adds	r7, #232	; 0xe8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop

08003e6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb0:	b08a      	sub	sp, #40	; 0x28
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4ba4      	ldr	r3, [pc, #656]	; (800416c <UART_SetConfig+0x2c0>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	6812      	ldr	r2, [r2, #0]
 8003ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a99      	ldr	r2, [pc, #612]	; (8004170 <UART_SetConfig+0x2c4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f14:	4313      	orrs	r3, r2
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a90      	ldr	r2, [pc, #576]	; (8004174 <UART_SetConfig+0x2c8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d126      	bne.n	8003f84 <UART_SetConfig+0xd8>
 8003f36:	4b90      	ldr	r3, [pc, #576]	; (8004178 <UART_SetConfig+0x2cc>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d81b      	bhi.n	8003f7c <UART_SetConfig+0xd0>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <UART_SetConfig+0xa0>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003f6d 	.word	0x08003f6d
 8003f54:	08003f65 	.word	0x08003f65
 8003f58:	08003f75 	.word	0x08003f75
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f62:	e116      	b.n	8004192 <UART_SetConfig+0x2e6>
 8003f64:	2302      	movs	r3, #2
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6a:	e112      	b.n	8004192 <UART_SetConfig+0x2e6>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f72:	e10e      	b.n	8004192 <UART_SetConfig+0x2e6>
 8003f74:	2308      	movs	r3, #8
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e10a      	b.n	8004192 <UART_SetConfig+0x2e6>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e106      	b.n	8004192 <UART_SetConfig+0x2e6>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a7c      	ldr	r2, [pc, #496]	; (800417c <UART_SetConfig+0x2d0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d138      	bne.n	8004000 <UART_SetConfig+0x154>
 8003f8e:	4b7a      	ldr	r3, [pc, #488]	; (8004178 <UART_SetConfig+0x2cc>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	d82d      	bhi.n	8003ff8 <UART_SetConfig+0x14c>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0xf8>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	08003ff9 	.word	0x08003ff9
 8003fac:	08003ff9 	.word	0x08003ff9
 8003fb0:	08003ff9 	.word	0x08003ff9
 8003fb4:	08003fe9 	.word	0x08003fe9
 8003fb8:	08003ff9 	.word	0x08003ff9
 8003fbc:	08003ff9 	.word	0x08003ff9
 8003fc0:	08003ff9 	.word	0x08003ff9
 8003fc4:	08003fe1 	.word	0x08003fe1
 8003fc8:	08003ff9 	.word	0x08003ff9
 8003fcc:	08003ff9 	.word	0x08003ff9
 8003fd0:	08003ff9 	.word	0x08003ff9
 8003fd4:	08003ff1 	.word	0x08003ff1
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fde:	e0d8      	b.n	8004192 <UART_SetConfig+0x2e6>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe6:	e0d4      	b.n	8004192 <UART_SetConfig+0x2e6>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fee:	e0d0      	b.n	8004192 <UART_SetConfig+0x2e6>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff6:	e0cc      	b.n	8004192 <UART_SetConfig+0x2e6>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffe:	e0c8      	b.n	8004192 <UART_SetConfig+0x2e6>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a5e      	ldr	r2, [pc, #376]	; (8004180 <UART_SetConfig+0x2d4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d125      	bne.n	8004056 <UART_SetConfig+0x1aa>
 800400a:	4b5b      	ldr	r3, [pc, #364]	; (8004178 <UART_SetConfig+0x2cc>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004014:	2b30      	cmp	r3, #48	; 0x30
 8004016:	d016      	beq.n	8004046 <UART_SetConfig+0x19a>
 8004018:	2b30      	cmp	r3, #48	; 0x30
 800401a:	d818      	bhi.n	800404e <UART_SetConfig+0x1a2>
 800401c:	2b20      	cmp	r3, #32
 800401e:	d00a      	beq.n	8004036 <UART_SetConfig+0x18a>
 8004020:	2b20      	cmp	r3, #32
 8004022:	d814      	bhi.n	800404e <UART_SetConfig+0x1a2>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <UART_SetConfig+0x182>
 8004028:	2b10      	cmp	r3, #16
 800402a:	d008      	beq.n	800403e <UART_SetConfig+0x192>
 800402c:	e00f      	b.n	800404e <UART_SetConfig+0x1a2>
 800402e:	2300      	movs	r3, #0
 8004030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004034:	e0ad      	b.n	8004192 <UART_SetConfig+0x2e6>
 8004036:	2302      	movs	r3, #2
 8004038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403c:	e0a9      	b.n	8004192 <UART_SetConfig+0x2e6>
 800403e:	2304      	movs	r3, #4
 8004040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004044:	e0a5      	b.n	8004192 <UART_SetConfig+0x2e6>
 8004046:	2308      	movs	r3, #8
 8004048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404c:	e0a1      	b.n	8004192 <UART_SetConfig+0x2e6>
 800404e:	2310      	movs	r3, #16
 8004050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004054:	e09d      	b.n	8004192 <UART_SetConfig+0x2e6>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a4a      	ldr	r2, [pc, #296]	; (8004184 <UART_SetConfig+0x2d8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d125      	bne.n	80040ac <UART_SetConfig+0x200>
 8004060:	4b45      	ldr	r3, [pc, #276]	; (8004178 <UART_SetConfig+0x2cc>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800406a:	2bc0      	cmp	r3, #192	; 0xc0
 800406c:	d016      	beq.n	800409c <UART_SetConfig+0x1f0>
 800406e:	2bc0      	cmp	r3, #192	; 0xc0
 8004070:	d818      	bhi.n	80040a4 <UART_SetConfig+0x1f8>
 8004072:	2b80      	cmp	r3, #128	; 0x80
 8004074:	d00a      	beq.n	800408c <UART_SetConfig+0x1e0>
 8004076:	2b80      	cmp	r3, #128	; 0x80
 8004078:	d814      	bhi.n	80040a4 <UART_SetConfig+0x1f8>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <UART_SetConfig+0x1d8>
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d008      	beq.n	8004094 <UART_SetConfig+0x1e8>
 8004082:	e00f      	b.n	80040a4 <UART_SetConfig+0x1f8>
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408a:	e082      	b.n	8004192 <UART_SetConfig+0x2e6>
 800408c:	2302      	movs	r3, #2
 800408e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004092:	e07e      	b.n	8004192 <UART_SetConfig+0x2e6>
 8004094:	2304      	movs	r3, #4
 8004096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409a:	e07a      	b.n	8004192 <UART_SetConfig+0x2e6>
 800409c:	2308      	movs	r3, #8
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a2:	e076      	b.n	8004192 <UART_SetConfig+0x2e6>
 80040a4:	2310      	movs	r3, #16
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040aa:	e072      	b.n	8004192 <UART_SetConfig+0x2e6>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a35      	ldr	r2, [pc, #212]	; (8004188 <UART_SetConfig+0x2dc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d12a      	bne.n	800410c <UART_SetConfig+0x260>
 80040b6:	4b30      	ldr	r3, [pc, #192]	; (8004178 <UART_SetConfig+0x2cc>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c4:	d01a      	beq.n	80040fc <UART_SetConfig+0x250>
 80040c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ca:	d81b      	bhi.n	8004104 <UART_SetConfig+0x258>
 80040cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d0:	d00c      	beq.n	80040ec <UART_SetConfig+0x240>
 80040d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d6:	d815      	bhi.n	8004104 <UART_SetConfig+0x258>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <UART_SetConfig+0x238>
 80040dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e0:	d008      	beq.n	80040f4 <UART_SetConfig+0x248>
 80040e2:	e00f      	b.n	8004104 <UART_SetConfig+0x258>
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ea:	e052      	b.n	8004192 <UART_SetConfig+0x2e6>
 80040ec:	2302      	movs	r3, #2
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f2:	e04e      	b.n	8004192 <UART_SetConfig+0x2e6>
 80040f4:	2304      	movs	r3, #4
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fa:	e04a      	b.n	8004192 <UART_SetConfig+0x2e6>
 80040fc:	2308      	movs	r3, #8
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004102:	e046      	b.n	8004192 <UART_SetConfig+0x2e6>
 8004104:	2310      	movs	r3, #16
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410a:	e042      	b.n	8004192 <UART_SetConfig+0x2e6>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a17      	ldr	r2, [pc, #92]	; (8004170 <UART_SetConfig+0x2c4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d13a      	bne.n	800418c <UART_SetConfig+0x2e0>
 8004116:	4b18      	ldr	r3, [pc, #96]	; (8004178 <UART_SetConfig+0x2cc>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004120:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004124:	d01a      	beq.n	800415c <UART_SetConfig+0x2b0>
 8004126:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800412a:	d81b      	bhi.n	8004164 <UART_SetConfig+0x2b8>
 800412c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004130:	d00c      	beq.n	800414c <UART_SetConfig+0x2a0>
 8004132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004136:	d815      	bhi.n	8004164 <UART_SetConfig+0x2b8>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <UART_SetConfig+0x298>
 800413c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004140:	d008      	beq.n	8004154 <UART_SetConfig+0x2a8>
 8004142:	e00f      	b.n	8004164 <UART_SetConfig+0x2b8>
 8004144:	2300      	movs	r3, #0
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414a:	e022      	b.n	8004192 <UART_SetConfig+0x2e6>
 800414c:	2302      	movs	r3, #2
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004152:	e01e      	b.n	8004192 <UART_SetConfig+0x2e6>
 8004154:	2304      	movs	r3, #4
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415a:	e01a      	b.n	8004192 <UART_SetConfig+0x2e6>
 800415c:	2308      	movs	r3, #8
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004162:	e016      	b.n	8004192 <UART_SetConfig+0x2e6>
 8004164:	2310      	movs	r3, #16
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416a:	e012      	b.n	8004192 <UART_SetConfig+0x2e6>
 800416c:	efff69f3 	.word	0xefff69f3
 8004170:	40008000 	.word	0x40008000
 8004174:	40013800 	.word	0x40013800
 8004178:	40021000 	.word	0x40021000
 800417c:	40004400 	.word	0x40004400
 8004180:	40004800 	.word	0x40004800
 8004184:	40004c00 	.word	0x40004c00
 8004188:	40005000 	.word	0x40005000
 800418c:	2310      	movs	r3, #16
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a9f      	ldr	r2, [pc, #636]	; (8004414 <UART_SetConfig+0x568>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d17a      	bne.n	8004292 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800419c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d824      	bhi.n	80041ee <UART_SetConfig+0x342>
 80041a4:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <UART_SetConfig+0x300>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041d1 	.word	0x080041d1
 80041b0:	080041ef 	.word	0x080041ef
 80041b4:	080041d9 	.word	0x080041d9
 80041b8:	080041ef 	.word	0x080041ef
 80041bc:	080041df 	.word	0x080041df
 80041c0:	080041ef 	.word	0x080041ef
 80041c4:	080041ef 	.word	0x080041ef
 80041c8:	080041ef 	.word	0x080041ef
 80041cc:	080041e7 	.word	0x080041e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d0:	f7fe fcda 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 80041d4:	61f8      	str	r0, [r7, #28]
        break;
 80041d6:	e010      	b.n	80041fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d8:	4b8f      	ldr	r3, [pc, #572]	; (8004418 <UART_SetConfig+0x56c>)
 80041da:	61fb      	str	r3, [r7, #28]
        break;
 80041dc:	e00d      	b.n	80041fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041de:	f7fe fc3b 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80041e2:	61f8      	str	r0, [r7, #28]
        break;
 80041e4:	e009      	b.n	80041fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ea:	61fb      	str	r3, [r7, #28]
        break;
 80041ec:	e005      	b.n	80041fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80fb 	beq.w	80043f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	4413      	add	r3, r2
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	429a      	cmp	r2, r3
 8004210:	d305      	bcc.n	800421e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	429a      	cmp	r2, r3
 800421c:	d903      	bls.n	8004226 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004224:	e0e8      	b.n	80043f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2200      	movs	r2, #0
 800422a:	461c      	mov	r4, r3
 800422c:	4615      	mov	r5, r2
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	022b      	lsls	r3, r5, #8
 8004238:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800423c:	0222      	lsls	r2, r4, #8
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	6849      	ldr	r1, [r1, #4]
 8004242:	0849      	lsrs	r1, r1, #1
 8004244:	2000      	movs	r0, #0
 8004246:	4688      	mov	r8, r1
 8004248:	4681      	mov	r9, r0
 800424a:	eb12 0a08 	adds.w	sl, r2, r8
 800424e:	eb43 0b09 	adc.w	fp, r3, r9
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004260:	4650      	mov	r0, sl
 8004262:	4659      	mov	r1, fp
 8004264:	f7fb ffb0 	bl	80001c8 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004276:	d308      	bcc.n	800428a <UART_SetConfig+0x3de>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427e:	d204      	bcs.n	800428a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	60da      	str	r2, [r3, #12]
 8004288:	e0b6      	b.n	80043f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004290:	e0b2      	b.n	80043f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429a:	d15e      	bne.n	800435a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800429c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d828      	bhi.n	80042f6 <UART_SetConfig+0x44a>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0x400>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042d9 	.word	0x080042d9
 80042b4:	080042e1 	.word	0x080042e1
 80042b8:	080042f7 	.word	0x080042f7
 80042bc:	080042e7 	.word	0x080042e7
 80042c0:	080042f7 	.word	0x080042f7
 80042c4:	080042f7 	.word	0x080042f7
 80042c8:	080042f7 	.word	0x080042f7
 80042cc:	080042ef 	.word	0x080042ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7fe fc5a 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 80042d4:	61f8      	str	r0, [r7, #28]
        break;
 80042d6:	e014      	b.n	8004302 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d8:	f7fe fc6c 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 80042dc:	61f8      	str	r0, [r7, #28]
        break;
 80042de:	e010      	b.n	8004302 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e0:	4b4d      	ldr	r3, [pc, #308]	; (8004418 <UART_SetConfig+0x56c>)
 80042e2:	61fb      	str	r3, [r7, #28]
        break;
 80042e4:	e00d      	b.n	8004302 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e6:	f7fe fbb7 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80042ea:	61f8      	str	r0, [r7, #28]
        break;
 80042ec:	e009      	b.n	8004302 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f2:	61fb      	str	r3, [r7, #28]
        break;
 80042f4:	e005      	b.n	8004302 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004300:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d077      	beq.n	80043f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	005a      	lsls	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	441a      	add	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b0f      	cmp	r3, #15
 8004322:	d916      	bls.n	8004352 <UART_SetConfig+0x4a6>
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432a:	d212      	bcs.n	8004352 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f023 030f 	bic.w	r3, r3, #15
 8004334:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	b29a      	uxth	r2, r3
 8004342:	8afb      	ldrh	r3, [r7, #22]
 8004344:	4313      	orrs	r3, r2
 8004346:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	8afa      	ldrh	r2, [r7, #22]
 800434e:	60da      	str	r2, [r3, #12]
 8004350:	e052      	b.n	80043f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004358:	e04e      	b.n	80043f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800435a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800435e:	2b08      	cmp	r3, #8
 8004360:	d827      	bhi.n	80043b2 <UART_SetConfig+0x506>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <UART_SetConfig+0x4bc>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800438d 	.word	0x0800438d
 800436c:	08004395 	.word	0x08004395
 8004370:	0800439d 	.word	0x0800439d
 8004374:	080043b3 	.word	0x080043b3
 8004378:	080043a3 	.word	0x080043a3
 800437c:	080043b3 	.word	0x080043b3
 8004380:	080043b3 	.word	0x080043b3
 8004384:	080043b3 	.word	0x080043b3
 8004388:	080043ab 	.word	0x080043ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800438c:	f7fe fbfc 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8004390:	61f8      	str	r0, [r7, #28]
        break;
 8004392:	e014      	b.n	80043be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7fe fc0e 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 8004398:	61f8      	str	r0, [r7, #28]
        break;
 800439a:	e010      	b.n	80043be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800439c:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <UART_SetConfig+0x56c>)
 800439e:	61fb      	str	r3, [r7, #28]
        break;
 80043a0:	e00d      	b.n	80043be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043a2:	f7fe fb59 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80043a6:	61f8      	str	r0, [r7, #28]
        break;
 80043a8:	e009      	b.n	80043be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ae:	61fb      	str	r3, [r7, #28]
        break;
 80043b0:	e005      	b.n	80043be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043bc:	bf00      	nop
    }

    if (pclk != 0U)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d019      	beq.n	80043f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	085a      	lsrs	r2, r3, #1
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	441a      	add	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2b0f      	cmp	r3, #15
 80043dc:	d909      	bls.n	80043f2 <UART_SetConfig+0x546>
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e4:	d205      	bcs.n	80043f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	e002      	b.n	80043f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004404:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004408:	4618      	mov	r0, r3
 800440a:	3728      	adds	r7, #40	; 0x28
 800440c:	46bd      	mov	sp, r7
 800440e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004412:	bf00      	nop
 8004414:	40008000 	.word	0x40008000
 8004418:	00f42400 	.word	0x00f42400

0800441c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01a      	beq.n	8004532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451a:	d10a      	bne.n	8004532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
  }
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b098      	sub	sp, #96	; 0x60
 8004564:	af02      	add	r7, sp, #8
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004570:	f7fc fce2 	bl	8000f38 <HAL_GetTick>
 8004574:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b08      	cmp	r3, #8
 8004582:	d12e      	bne.n	80045e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800458c:	2200      	movs	r2, #0
 800458e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f88c 	bl	80046b0 <UART_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d021      	beq.n	80045e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b2:	653b      	str	r3, [r7, #80]	; 0x50
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045bc:	647b      	str	r3, [r7, #68]	; 0x44
 80045be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e6      	bne.n	800459e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e062      	b.n	80046a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d149      	bne.n	8004684 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f8:	2200      	movs	r2, #0
 80045fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f856 	bl	80046b0 <UART_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d03c      	beq.n	8004684 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	623b      	str	r3, [r7, #32]
   return(result);
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800461e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004628:	633b      	str	r3, [r7, #48]	; 0x30
 800462a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800462e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e6      	bne.n	800460a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	e853 3f00 	ldrex	r3, [r3]
 800464a:	60fb      	str	r3, [r7, #12]
   return(result);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	64bb      	str	r3, [r7, #72]	; 0x48
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800465c:	61fa      	str	r2, [r7, #28]
 800465e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	69b9      	ldr	r1, [r7, #24]
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	e841 2300 	strex	r3, r2, [r1]
 8004668:	617b      	str	r3, [r7, #20]
   return(result);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e5      	bne.n	800463c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e011      	b.n	80046a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3758      	adds	r7, #88	; 0x58
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c0:	e04f      	b.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d04b      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7fc fc35 	bl	8000f38 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e04e      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d037      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b80      	cmp	r3, #128	; 0x80
 80046f6:	d034      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d031      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b08      	cmp	r3, #8
 800470a:	d110      	bne.n	800472e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2208      	movs	r2, #8
 8004712:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f8ff 	bl	8004918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2208      	movs	r2, #8
 800471e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e029      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473c:	d111      	bne.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f8e5 	bl	8004918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e00f      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	429a      	cmp	r2, r3
 800477e:	d0a0      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800478c:	b480      	push	{r7}
 800478e:	b097      	sub	sp, #92	; 0x5c
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	88fa      	ldrh	r2, [r7, #6]
 80047ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047be:	d10e      	bne.n	80047de <UART_Start_Receive_IT+0x52>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <UART_Start_Receive_IT+0x48>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047d2:	e02d      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	22ff      	movs	r2, #255	; 0xff
 80047d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047dc:	e028      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10d      	bne.n	8004802 <UART_Start_Receive_IT+0x76>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <UART_Start_Receive_IT+0x6c>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	22ff      	movs	r2, #255	; 0xff
 80047f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047f6:	e01b      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	227f      	movs	r2, #127	; 0x7f
 80047fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004800:	e016      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480a:	d10d      	bne.n	8004828 <UART_Start_Receive_IT+0x9c>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <UART_Start_Receive_IT+0x92>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	227f      	movs	r2, #127	; 0x7f
 8004818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800481c:	e008      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	223f      	movs	r2, #63	; 0x3f
 8004822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004826:	e003      	b.n	8004830 <UART_Start_Receive_IT+0xa4>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2222      	movs	r2, #34	; 0x22
 800483c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	657b      	str	r3, [r7, #84]	; 0x54
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3308      	adds	r3, #8
 800485e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004860:	64ba      	str	r2, [r7, #72]	; 0x48
 8004862:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800486e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e5      	bne.n	8004840 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487c:	d107      	bne.n	800488e <UART_Start_Receive_IT+0x102>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4a21      	ldr	r2, [pc, #132]	; (8004910 <UART_Start_Receive_IT+0x184>)
 800488a:	669a      	str	r2, [r3, #104]	; 0x68
 800488c:	e002      	b.n	8004894 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a20      	ldr	r2, [pc, #128]	; (8004914 <UART_Start_Receive_IT+0x188>)
 8004892:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d019      	beq.n	80048d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80048b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ba:	637b      	str	r3, [r7, #52]	; 0x34
 80048bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e6      	bne.n	800489c <UART_Start_Receive_IT+0x110>
 80048ce:	e018      	b.n	8004902 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	613b      	str	r3, [r7, #16]
   return(result);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f043 0320 	orr.w	r3, r3, #32
 80048e4:	653b      	str	r3, [r7, #80]	; 0x50
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ee:	623b      	str	r3, [r7, #32]
 80048f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	69f9      	ldr	r1, [r7, #28]
 80048f4:	6a3a      	ldr	r2, [r7, #32]
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e6      	bne.n	80048d0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	375c      	adds	r7, #92	; 0x5c
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	08004c1d 	.word	0x08004c1d
 8004914:	08004a61 	.word	0x08004a61

08004918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b095      	sub	sp, #84	; 0x54
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493e:	643b      	str	r3, [r7, #64]	; 0x40
 8004940:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e6      	bne.n	8004920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	61fb      	str	r3, [r7, #28]
   return(result);
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	64bb      	str	r3, [r7, #72]	; 0x48
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3308      	adds	r3, #8
 8004970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e5      	bne.n	8004952 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498a:	2b01      	cmp	r3, #1
 800498c:	d118      	bne.n	80049c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	60bb      	str	r3, [r7, #8]
   return(result);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f023 0310 	bic.w	r3, r3, #16
 80049a2:	647b      	str	r3, [r7, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6979      	ldr	r1, [r7, #20]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e6      	bne.n	800498e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049d4:	bf00      	nop
 80049d6:	3754      	adds	r7, #84	; 0x54
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7ff fa3e 	bl	8003e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6979      	ldr	r1, [r7, #20]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e6      	bne.n	8004a14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff fa0a 	bl	8003e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a58:	bf00      	nop
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b09c      	sub	sp, #112	; 0x70
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a78:	2b22      	cmp	r3, #34	; 0x22
 8004a7a:	f040 80be 	bne.w	8004bfa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004a8c:	b2d9      	uxtb	r1, r3
 8004a8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a98:	400a      	ands	r2, r1
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 80a3 	bne.w	8004c0e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004adc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ae6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ae8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e6      	bne.n	8004ac8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3308      	adds	r3, #8
 8004b00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	667b      	str	r3, [r7, #100]	; 0x64
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b1a:	647a      	str	r2, [r7, #68]	; 0x44
 8004b1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e5      	bne.n	8004afa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a34      	ldr	r2, [pc, #208]	; (8004c18 <UART_RxISR_8BIT+0x1b8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d01f      	beq.n	8004b8c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d018      	beq.n	8004b8c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	623b      	str	r3, [r7, #32]
   return(result);
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b78:	633b      	str	r3, [r7, #48]	; 0x30
 8004b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e6      	bne.n	8004b5a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d12e      	bne.n	8004bf2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0310 	bic.w	r3, r3, #16
 8004bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	69b9      	ldr	r1, [r7, #24]
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e6      	bne.n	8004b9a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d103      	bne.n	8004be2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2210      	movs	r2, #16
 8004be0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff f952 	bl	8003e94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bf0:	e00d      	b.n	8004c0e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fb fc66 	bl	80004c4 <HAL_UART_RxCpltCallback>
}
 8004bf8:	e009      	b.n	8004c0e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	8b1b      	ldrh	r3, [r3, #24]
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0208 	orr.w	r2, r2, #8
 8004c0a:	b292      	uxth	r2, r2
 8004c0c:	831a      	strh	r2, [r3, #24]
}
 8004c0e:	bf00      	nop
 8004c10:	3770      	adds	r7, #112	; 0x70
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40008000 	.word	0x40008000

08004c1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b09c      	sub	sp, #112	; 0x70
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c2a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c34:	2b22      	cmp	r3, #34	; 0x22
 8004c36:	f040 80be 	bne.w	8004db6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004c4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004c52:	4013      	ands	r3, r2
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	1c9a      	adds	r2, r3, #2
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f040 80a3 	bne.w	8004dca <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c98:	667b      	str	r3, [r7, #100]	; 0x64
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ca4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e6      	bne.n	8004c84 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3308      	adds	r3, #8
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	f023 0301 	bic.w	r3, r3, #1
 8004ccc:	663b      	str	r3, [r7, #96]	; 0x60
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cd6:	643a      	str	r2, [r7, #64]	; 0x40
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e5      	bne.n	8004cb6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <UART_RxISR_16BIT+0x1b8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d01f      	beq.n	8004d48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d018      	beq.n	8004d48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d36:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e6      	bne.n	8004d16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d12e      	bne.n	8004dae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f023 0310 	bic.w	r3, r3, #16
 8004d6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6979      	ldr	r1, [r7, #20]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	613b      	str	r3, [r7, #16]
   return(result);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e6      	bne.n	8004d56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d103      	bne.n	8004d9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2210      	movs	r2, #16
 8004d9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004da4:	4619      	mov	r1, r3
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff f874 	bl	8003e94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dac:	e00d      	b.n	8004dca <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fb fb88 	bl	80004c4 <HAL_UART_RxCpltCallback>
}
 8004db4:	e009      	b.n	8004dca <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	8b1b      	ldrh	r3, [r3, #24]
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0208 	orr.w	r2, r2, #8
 8004dc6:	b292      	uxth	r2, r2
 8004dc8:	831a      	strh	r2, [r3, #24]
}
 8004dca:	bf00      	nop
 8004dcc:	3770      	adds	r7, #112	; 0x70
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40008000 	.word	0x40008000

08004dd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004df0:	bf00      	nop
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af04      	add	r7, sp, #16
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004e06:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0a:	9302      	str	r3, [sp, #8]
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	2301      	movs	r3, #1
 8004e16:	2200      	movs	r2, #0
 8004e18:	2178      	movs	r1, #120	; 0x78
 8004e1a:	4803      	ldr	r0, [pc, #12]	; (8004e28 <ssd1306_WriteCommand+0x2c>)
 8004e1c:	f7fc fcc2 	bl	80017a4 <HAL_I2C_Mem_Write>
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000028 	.word	0x20000028

08004e2c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af04      	add	r7, sp, #16
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3e:	9202      	str	r2, [sp, #8]
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2301      	movs	r3, #1
 8004e48:	2240      	movs	r2, #64	; 0x40
 8004e4a:	2178      	movs	r1, #120	; 0x78
 8004e4c:	4803      	ldr	r0, [pc, #12]	; (8004e5c <ssd1306_WriteData+0x30>)
 8004e4e:	f7fc fca9 	bl	80017a4 <HAL_I2C_Mem_Write>
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000028 	.word	0x20000028

08004e60 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004e64:	f7ff ffc2 	bl	8004dec <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004e68:	2064      	movs	r0, #100	; 0x64
 8004e6a:	f7fc f871 	bl	8000f50 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f000 f9d8 	bl	8005224 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004e74:	2020      	movs	r0, #32
 8004e76:	f7ff ffc1 	bl	8004dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f7ff ffbe 	bl	8004dfc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004e80:	20b0      	movs	r0, #176	; 0xb0
 8004e82:	f7ff ffbb 	bl	8004dfc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004e86:	20c8      	movs	r0, #200	; 0xc8
 8004e88:	f7ff ffb8 	bl	8004dfc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	f7ff ffb5 	bl	8004dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004e92:	2010      	movs	r0, #16
 8004e94:	f7ff ffb2 	bl	8004dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004e98:	2040      	movs	r0, #64	; 0x40
 8004e9a:	f7ff ffaf 	bl	8004dfc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004e9e:	20ff      	movs	r0, #255	; 0xff
 8004ea0:	f000 f9ac 	bl	80051fc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004ea4:	20a1      	movs	r0, #161	; 0xa1
 8004ea6:	f7ff ffa9 	bl	8004dfc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004eaa:	20a6      	movs	r0, #166	; 0xa6
 8004eac:	f7ff ffa6 	bl	8004dfc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004eb0:	20a8      	movs	r0, #168	; 0xa8
 8004eb2:	f7ff ffa3 	bl	8004dfc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004eb6:	203f      	movs	r0, #63	; 0x3f
 8004eb8:	f7ff ffa0 	bl	8004dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004ebc:	20a4      	movs	r0, #164	; 0xa4
 8004ebe:	f7ff ff9d 	bl	8004dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004ec2:	20d3      	movs	r0, #211	; 0xd3
 8004ec4:	f7ff ff9a 	bl	8004dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004ec8:	2000      	movs	r0, #0
 8004eca:	f7ff ff97 	bl	8004dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004ece:	20d5      	movs	r0, #213	; 0xd5
 8004ed0:	f7ff ff94 	bl	8004dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004ed4:	20f0      	movs	r0, #240	; 0xf0
 8004ed6:	f7ff ff91 	bl	8004dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004eda:	20d9      	movs	r0, #217	; 0xd9
 8004edc:	f7ff ff8e 	bl	8004dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004ee0:	2022      	movs	r0, #34	; 0x22
 8004ee2:	f7ff ff8b 	bl	8004dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004ee6:	20da      	movs	r0, #218	; 0xda
 8004ee8:	f7ff ff88 	bl	8004dfc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004eec:	2012      	movs	r0, #18
 8004eee:	f7ff ff85 	bl	8004dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004ef2:	20db      	movs	r0, #219	; 0xdb
 8004ef4:	f7ff ff82 	bl	8004dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004ef8:	2020      	movs	r0, #32
 8004efa:	f7ff ff7f 	bl	8004dfc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004efe:	208d      	movs	r0, #141	; 0x8d
 8004f00:	f7ff ff7c 	bl	8004dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004f04:	2014      	movs	r0, #20
 8004f06:	f7ff ff79 	bl	8004dfc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	f000 f98a 	bl	8005224 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004f10:	2000      	movs	r0, #0
 8004f12:	f000 f80f 	bl	8004f34 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004f16:	f000 f825 	bl	8004f64 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <ssd1306_Init+0xd0>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004f20:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <ssd1306_Init+0xd0>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004f26:	4b02      	ldr	r3, [pc, #8]	; (8004f30 <ssd1306_Init+0xd0>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	711a      	strb	r2, [r3, #4]
}
 8004f2c:	bf00      	nop
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	200005c0 	.word	0x200005c0

08004f34 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <ssd1306_Fill+0x14>
 8004f44:	2300      	movs	r3, #0
 8004f46:	e000      	b.n	8004f4a <ssd1306_Fill+0x16>
 8004f48:	23ff      	movs	r3, #255	; 0xff
 8004f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4803      	ldr	r0, [pc, #12]	; (8004f60 <ssd1306_Fill+0x2c>)
 8004f52:	f000 f985 	bl	8005260 <memset>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	200001c0 	.word	0x200001c0

08004f64 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	71fb      	strb	r3, [r7, #7]
 8004f6e:	e016      	b.n	8004f9e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	3b50      	subs	r3, #80	; 0x50
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff ff40 	bl	8004dfc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f7ff ff3d 	bl	8004dfc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004f82:	2010      	movs	r0, #16
 8004f84:	f7ff ff3a 	bl	8004dfc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	01db      	lsls	r3, r3, #7
 8004f8c:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <ssd1306_UpdateScreen+0x4c>)
 8004f8e:	4413      	add	r3, r2
 8004f90:	2180      	movs	r1, #128	; 0x80
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff ff4a 	bl	8004e2c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	71fb      	strb	r3, [r7, #7]
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	2b07      	cmp	r3, #7
 8004fa2:	d9e5      	bls.n	8004f70 <ssd1306_UpdateScreen+0xc>
    }
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200001c0 	.word	0x200001c0

08004fb4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	71fb      	strb	r3, [r7, #7]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	71bb      	strb	r3, [r7, #6]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	db3d      	blt.n	800504a <ssd1306_DrawPixel+0x96>
 8004fce:	79bb      	ldrb	r3, [r7, #6]
 8004fd0:	2b3f      	cmp	r3, #63	; 0x3f
 8004fd2:	d83a      	bhi.n	800504a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004fd4:	797b      	ldrb	r3, [r7, #5]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d11a      	bne.n	8005010 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004fda:	79fa      	ldrb	r2, [r7, #7]
 8004fdc:	79bb      	ldrb	r3, [r7, #6]
 8004fde:	08db      	lsrs	r3, r3, #3
 8004fe0:	b2d8      	uxtb	r0, r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	01db      	lsls	r3, r3, #7
 8004fe6:	4413      	add	r3, r2
 8004fe8:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <ssd1306_DrawPixel+0xa4>)
 8004fea:	5cd3      	ldrb	r3, [r2, r3]
 8004fec:	b25a      	sxtb	r2, r3
 8004fee:	79bb      	ldrb	r3, [r7, #6]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	b25b      	sxtb	r3, r3
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	b259      	sxtb	r1, r3
 8005000:	79fa      	ldrb	r2, [r7, #7]
 8005002:	4603      	mov	r3, r0
 8005004:	01db      	lsls	r3, r3, #7
 8005006:	4413      	add	r3, r2
 8005008:	b2c9      	uxtb	r1, r1
 800500a:	4a13      	ldr	r2, [pc, #76]	; (8005058 <ssd1306_DrawPixel+0xa4>)
 800500c:	54d1      	strb	r1, [r2, r3]
 800500e:	e01d      	b.n	800504c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005010:	79fa      	ldrb	r2, [r7, #7]
 8005012:	79bb      	ldrb	r3, [r7, #6]
 8005014:	08db      	lsrs	r3, r3, #3
 8005016:	b2d8      	uxtb	r0, r3
 8005018:	4603      	mov	r3, r0
 800501a:	01db      	lsls	r3, r3, #7
 800501c:	4413      	add	r3, r2
 800501e:	4a0e      	ldr	r2, [pc, #56]	; (8005058 <ssd1306_DrawPixel+0xa4>)
 8005020:	5cd3      	ldrb	r3, [r2, r3]
 8005022:	b25a      	sxtb	r2, r3
 8005024:	79bb      	ldrb	r3, [r7, #6]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	2101      	movs	r1, #1
 800502c:	fa01 f303 	lsl.w	r3, r1, r3
 8005030:	b25b      	sxtb	r3, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	b25b      	sxtb	r3, r3
 8005036:	4013      	ands	r3, r2
 8005038:	b259      	sxtb	r1, r3
 800503a:	79fa      	ldrb	r2, [r7, #7]
 800503c:	4603      	mov	r3, r0
 800503e:	01db      	lsls	r3, r3, #7
 8005040:	4413      	add	r3, r2
 8005042:	b2c9      	uxtb	r1, r1
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <ssd1306_DrawPixel+0xa4>)
 8005046:	54d1      	strb	r1, [r2, r3]
 8005048:	e000      	b.n	800504c <ssd1306_DrawPixel+0x98>
        return;
 800504a:	bf00      	nop
    }
}
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	200001c0 	.word	0x200001c0

0800505c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b089      	sub	sp, #36	; 0x24
 8005060:	af00      	add	r7, sp, #0
 8005062:	4604      	mov	r4, r0
 8005064:	4638      	mov	r0, r7
 8005066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800506a:	4623      	mov	r3, r4
 800506c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b1f      	cmp	r3, #31
 8005072:	d902      	bls.n	800507a <ssd1306_WriteChar+0x1e>
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b7e      	cmp	r3, #126	; 0x7e
 8005078:	d901      	bls.n	800507e <ssd1306_WriteChar+0x22>
        return 0;
 800507a:	2300      	movs	r3, #0
 800507c:	e079      	b.n	8005172 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800507e:	4b3f      	ldr	r3, [pc, #252]	; (800517c <ssd1306_WriteChar+0x120>)
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	783b      	ldrb	r3, [r7, #0]
 8005086:	4413      	add	r3, r2
 8005088:	2b80      	cmp	r3, #128	; 0x80
 800508a:	dc06      	bgt.n	800509a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800508c:	4b3b      	ldr	r3, [pc, #236]	; (800517c <ssd1306_WriteChar+0x120>)
 800508e:	885b      	ldrh	r3, [r3, #2]
 8005090:	461a      	mov	r2, r3
 8005092:	787b      	ldrb	r3, [r7, #1]
 8005094:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	dd01      	ble.n	800509e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800509a:	2300      	movs	r3, #0
 800509c:	e069      	b.n	8005172 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800509e:	2300      	movs	r3, #0
 80050a0:	61fb      	str	r3, [r7, #28]
 80050a2:	e04e      	b.n	8005142 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	3b20      	subs	r3, #32
 80050aa:	7879      	ldrb	r1, [r7, #1]
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	4619      	mov	r1, r3
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	440b      	add	r3, r1
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e036      	b.n	8005132 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d013      	beq.n	80050fc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80050d4:	4b29      	ldr	r3, [pc, #164]	; (800517c <ssd1306_WriteChar+0x120>)
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	4413      	add	r3, r2
 80050e0:	b2d8      	uxtb	r0, r3
 80050e2:	4b26      	ldr	r3, [pc, #152]	; (800517c <ssd1306_WriteChar+0x120>)
 80050e4:	885b      	ldrh	r3, [r3, #2]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	4413      	add	r3, r2
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80050f4:	4619      	mov	r1, r3
 80050f6:	f7ff ff5d 	bl	8004fb4 <ssd1306_DrawPixel>
 80050fa:	e017      	b.n	800512c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80050fc:	4b1f      	ldr	r3, [pc, #124]	; (800517c <ssd1306_WriteChar+0x120>)
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	4413      	add	r3, r2
 8005108:	b2d8      	uxtb	r0, r3
 800510a:	4b1c      	ldr	r3, [pc, #112]	; (800517c <ssd1306_WriteChar+0x120>)
 800510c:	885b      	ldrh	r3, [r3, #2]
 800510e:	b2da      	uxtb	r2, r3
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	4413      	add	r3, r2
 8005116:	b2d9      	uxtb	r1, r3
 8005118:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800511c:	2b00      	cmp	r3, #0
 800511e:	bf0c      	ite	eq
 8005120:	2301      	moveq	r3, #1
 8005122:	2300      	movne	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	f7ff ff44 	bl	8004fb4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	3301      	adds	r3, #1
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	783b      	ldrb	r3, [r7, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	4293      	cmp	r3, r2
 800513a:	d3c3      	bcc.n	80050c4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	3301      	adds	r3, #1
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	787b      	ldrb	r3, [r7, #1]
 8005144:	461a      	mov	r2, r3
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	4293      	cmp	r3, r2
 800514a:	d3ab      	bcc.n	80050a4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <ssd1306_WriteChar+0x120>)
 800514e:	881a      	ldrh	r2, [r3, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d006      	beq.n	8005164 <ssd1306_WriteChar+0x108>
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	3b20      	subs	r3, #32
 800515c:	440b      	add	r3, r1
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	e001      	b.n	8005168 <ssd1306_WriteChar+0x10c>
 8005164:	783b      	ldrb	r3, [r7, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	4413      	add	r3, r2
 800516a:	b29a      	uxth	r2, r3
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <ssd1306_WriteChar+0x120>)
 800516e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3724      	adds	r7, #36	; 0x24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd90      	pop	{r4, r7, pc}
 800517a:	bf00      	nop
 800517c:	200005c0 	.word	0x200005c0

08005180 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	4638      	mov	r0, r7
 800518a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800518e:	e013      	b.n	80051b8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	7818      	ldrb	r0, [r3, #0]
 8005194:	7e3b      	ldrb	r3, [r7, #24]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	463b      	mov	r3, r7
 800519a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800519c:	f7ff ff5e 	bl	800505c <ssd1306_WriteChar>
 80051a0:	4603      	mov	r3, r0
 80051a2:	461a      	mov	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d002      	beq.n	80051b2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	e008      	b.n	80051c4 <ssd1306_WriteString+0x44>
        }
        str++;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3301      	adds	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e7      	bne.n	8005190 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	781b      	ldrb	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	460a      	mov	r2, r1
 80051d6:	71fb      	strb	r3, [r7, #7]
 80051d8:	4613      	mov	r3, r2
 80051da:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	b29a      	uxth	r2, r3
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <ssd1306_SetCursor+0x2c>)
 80051e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80051e4:	79bb      	ldrb	r3, [r7, #6]
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <ssd1306_SetCursor+0x2c>)
 80051ea:	805a      	strh	r2, [r3, #2]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	200005c0 	.word	0x200005c0

080051fc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005206:	2381      	movs	r3, #129	; 0x81
 8005208:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fdf5 	bl	8004dfc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fdf1 	bl	8004dfc <ssd1306_WriteCommand>
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005234:	23af      	movs	r3, #175	; 0xaf
 8005236:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005238:	4b08      	ldr	r3, [pc, #32]	; (800525c <ssd1306_SetDisplayOn+0x38>)
 800523a:	2201      	movs	r2, #1
 800523c:	715a      	strb	r2, [r3, #5]
 800523e:	e004      	b.n	800524a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005240:	23ae      	movs	r3, #174	; 0xae
 8005242:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <ssd1306_SetDisplayOn+0x38>)
 8005246:	2200      	movs	r2, #0
 8005248:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff fdd5 	bl	8004dfc <ssd1306_WriteCommand>
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200005c0 	.word	0x200005c0

08005260 <memset>:
 8005260:	4402      	add	r2, r0
 8005262:	4603      	mov	r3, r0
 8005264:	4293      	cmp	r3, r2
 8005266:	d100      	bne.n	800526a <memset+0xa>
 8005268:	4770      	bx	lr
 800526a:	f803 1b01 	strb.w	r1, [r3], #1
 800526e:	e7f9      	b.n	8005264 <memset+0x4>

08005270 <__libc_init_array>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	4d0d      	ldr	r5, [pc, #52]	; (80052a8 <__libc_init_array+0x38>)
 8005274:	4c0d      	ldr	r4, [pc, #52]	; (80052ac <__libc_init_array+0x3c>)
 8005276:	1b64      	subs	r4, r4, r5
 8005278:	10a4      	asrs	r4, r4, #2
 800527a:	2600      	movs	r6, #0
 800527c:	42a6      	cmp	r6, r4
 800527e:	d109      	bne.n	8005294 <__libc_init_array+0x24>
 8005280:	4d0b      	ldr	r5, [pc, #44]	; (80052b0 <__libc_init_array+0x40>)
 8005282:	4c0c      	ldr	r4, [pc, #48]	; (80052b4 <__libc_init_array+0x44>)
 8005284:	f000 f818 	bl	80052b8 <_init>
 8005288:	1b64      	subs	r4, r4, r5
 800528a:	10a4      	asrs	r4, r4, #2
 800528c:	2600      	movs	r6, #0
 800528e:	42a6      	cmp	r6, r4
 8005290:	d105      	bne.n	800529e <__libc_init_array+0x2e>
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	f855 3b04 	ldr.w	r3, [r5], #4
 8005298:	4798      	blx	r3
 800529a:	3601      	adds	r6, #1
 800529c:	e7ee      	b.n	800527c <__libc_init_array+0xc>
 800529e:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a2:	4798      	blx	r3
 80052a4:	3601      	adds	r6, #1
 80052a6:	e7f2      	b.n	800528e <__libc_init_array+0x1e>
 80052a8:	08005950 	.word	0x08005950
 80052ac:	08005950 	.word	0x08005950
 80052b0:	08005950 	.word	0x08005950
 80052b4:	08005954 	.word	0x08005954

080052b8 <_init>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr

080052c4 <_fini>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	bf00      	nop
 80052c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ca:	bc08      	pop	{r3}
 80052cc:	469e      	mov	lr, r3
 80052ce:	4770      	bx	lr
